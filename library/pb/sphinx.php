<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: sphinx.proto
//   Date: 2016-12-23 08:19:09

namespace iface\SelectRequest {

  class Direction extends \DrSlump\Protobuf\Enum {
    const LATER = 0;
    const OLDER = 1;
  }
}
namespace iface {

  class SelectRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $SuiteName = null;
    
    /**  @var string */
    public $PlacementId = null;
    
    /**  @var int */
    public $RequireCount = null;
    
    /**  @var int */
    public $Start = null;
    
    /**  @var int - \iface\SelectRequest\Direction */
    public $Dir = null;
    
    /**  @var \ipeninsula\RequestContext */
    public $Requests = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.SelectRequest');

      // OPTIONAL STRING SuiteName = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "SuiteName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING PlacementId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "PlacementId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 RequireCount = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "RequireCount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 Start = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "Start";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM Dir = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "Dir";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\iface\SelectRequest\Direction';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE Requests = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "Requests";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\ipeninsula\RequestContext';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <SuiteName> has a value
     *
     * @return boolean
     */
    public function hasSuiteName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <SuiteName> value
     *
     * @return \iface\SelectRequest
     */
    public function clearSuiteName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <SuiteName> value
     *
     * @return string
     */
    public function getSuiteName(){
      return $this->_get(1);
    }
    
    /**
     * Set <SuiteName> value
     *
     * @param string $value
     * @return \iface\SelectRequest
     */
    public function setSuiteName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <PlacementId> has a value
     *
     * @return boolean
     */
    public function hasPlacementId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <PlacementId> value
     *
     * @return \iface\SelectRequest
     */
    public function clearPlacementId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <PlacementId> value
     *
     * @return string
     */
    public function getPlacementId(){
      return $this->_get(2);
    }
    
    /**
     * Set <PlacementId> value
     *
     * @param string $value
     * @return \iface\SelectRequest
     */
    public function setPlacementId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <RequireCount> has a value
     *
     * @return boolean
     */
    public function hasRequireCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <RequireCount> value
     *
     * @return \iface\SelectRequest
     */
    public function clearRequireCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <RequireCount> value
     *
     * @return int
     */
    public function getRequireCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <RequireCount> value
     *
     * @param int $value
     * @return \iface\SelectRequest
     */
    public function setRequireCount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <Start> has a value
     *
     * @return boolean
     */
    public function hasStart(){
      return $this->_has(4);
    }
    
    /**
     * Clear <Start> value
     *
     * @return \iface\SelectRequest
     */
    public function clearStart(){
      return $this->_clear(4);
    }
    
    /**
     * Get <Start> value
     *
     * @return int
     */
    public function getStart(){
      return $this->_get(4);
    }
    
    /**
     * Set <Start> value
     *
     * @param int $value
     * @return \iface\SelectRequest
     */
    public function setStart( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <Dir> has a value
     *
     * @return boolean
     */
    public function hasDir(){
      return $this->_has(5);
    }
    
    /**
     * Clear <Dir> value
     *
     * @return \iface\SelectRequest
     */
    public function clearDir(){
      return $this->_clear(5);
    }
    
    /**
     * Get <Dir> value
     *
     * @return int - \iface\SelectRequest\Direction
     */
    public function getDir(){
      return $this->_get(5);
    }
    
    /**
     * Set <Dir> value
     *
     * @param int - \iface\SelectRequest\Direction $value
     * @return \iface\SelectRequest
     */
    public function setDir( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <Requests> has a value
     *
     * @return boolean
     */
    public function hasRequests(){
      return $this->_has(6);
    }
    
    /**
     * Clear <Requests> value
     *
     * @return \iface\SelectRequest
     */
    public function clearRequests(){
      return $this->_clear(6);
    }
    
    /**
     * Get <Requests> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function getRequests(){
      return $this->_get(6);
    }
    
    /**
     * Set <Requests> value
     *
     * @param \ipeninsula\RequestContext $value
     * @return \iface\SelectRequest
     */
    public function setRequests(\ipeninsula\RequestContext $value){
      return $this->_set(6, $value);
    }
  }
}

namespace iface {

  class NewsModel extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $NewsId = null;
    
    /**  @var float */
    public $Weight = null;
    
    /**  @var string */
    public $RecommendTag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.NewsModel');

      // OPTIONAL STRING NewsId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "NewsId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE Weight = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "Weight";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING RecommendTag = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "RecommendTag";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <NewsId> has a value
     *
     * @return boolean
     */
    public function hasNewsId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <NewsId> value
     *
     * @return \iface\NewsModel
     */
    public function clearNewsId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <NewsId> value
     *
     * @return string
     */
    public function getNewsId(){
      return $this->_get(1);
    }
    
    /**
     * Set <NewsId> value
     *
     * @param string $value
     * @return \iface\NewsModel
     */
    public function setNewsId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <Weight> has a value
     *
     * @return boolean
     */
    public function hasWeight(){
      return $this->_has(2);
    }
    
    /**
     * Clear <Weight> value
     *
     * @return \iface\NewsModel
     */
    public function clearWeight(){
      return $this->_clear(2);
    }
    
    /**
     * Get <Weight> value
     *
     * @return float
     */
    public function getWeight(){
      return $this->_get(2);
    }
    
    /**
     * Set <Weight> value
     *
     * @param float $value
     * @return \iface\NewsModel
     */
    public function setWeight( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <RecommendTag> has a value
     *
     * @return boolean
     */
    public function hasRecommendTag(){
      return $this->_has(3);
    }
    
    /**
     * Clear <RecommendTag> value
     *
     * @return \iface\NewsModel
     */
    public function clearRecommendTag(){
      return $this->_clear(3);
    }
    
    /**
     * Get <RecommendTag> value
     *
     * @return string
     */
    public function getRecommendTag(){
      return $this->_get(3);
    }
    
    /**
     * Set <RecommendTag> value
     *
     * @param string $value
     * @return \iface\NewsModel
     */
    public function setRecommendTag( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace iface {

  class SelectResponse extends \DrSlump\Protobuf\Message {

    /**  @var \iface\NewsModel[]  */
    public $Models = array();
    
    /**  @var string[]  */
    public $Tags = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.SelectResponse');

      // REPEATED MESSAGE Models = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Models";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\iface\NewsModel';
      $descriptor->addField($f);

      // REPEATED STRING Tags = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "Tags";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Models> has a value
     *
     * @return boolean
     */
    public function hasModels(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Models> value
     *
     * @return \iface\SelectResponse
     */
    public function clearModels(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Models> value
     *
     * @param int $idx
     * @return \iface\NewsModel
     */
    public function getModels($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <Models> value
     *
     * @param \iface\NewsModel $value
     * @return \iface\SelectResponse
     */
    public function setModels(\iface\NewsModel $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <Models>
     *
     * @return \iface\NewsModel[]
     */
    public function getModelsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <Models>
     *
     * @param \iface\NewsModel $value
     * @return \iface\SelectResponse
     */
    public function addModels(\iface\NewsModel $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <Tags> has a value
     *
     * @return boolean
     */
    public function hasTags(){
      return $this->_has(2);
    }
    
    /**
     * Clear <Tags> value
     *
     * @return \iface\SelectResponse
     */
    public function clearTags(){
      return $this->_clear(2);
    }
    
    /**
     * Get <Tags> value
     *
     * @param int $idx
     * @return string
     */
    public function getTags($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <Tags> value
     *
     * @param string $value
     * @return \iface\SelectResponse
     */
    public function setTags( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <Tags>
     *
     * @return string[]
     */
    public function getTagsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <Tags>
     *
     * @param string $value
     * @return \iface\SelectResponse
     */
    public function addTags( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace iface {

  class SphinxServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param iface\SelectRequest $input
     */
    public function Select(\iface\SelectRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/iface.SphinxService/Select', $argument, '\iface\SelectResponse::deserialize', $metadata, $options);
    }
  }
}
