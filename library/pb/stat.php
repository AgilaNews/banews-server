<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: stat.proto
//   Date: 2016-12-11 13:58:12

namespace ipeninsula {

  class ServiceStatus extends \DrSlump\Protobuf\Enum {
    const UNKNOWN = 0;
    const INIT = 1;
    const WORKING = 2;
    const STOPPING = 3;
  }
}
namespace ipeninsula\StatResponse {

  class CountersEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ipeninsula.StatResponse.CountersEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \ipeninsula\StatResponse\CountersEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \ipeninsula\StatResponse\CountersEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \ipeninsula\StatResponse\CountersEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \ipeninsula\StatResponse\CountersEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace ipeninsula {

  class StatResponse extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $Name = null;
    
    /**  @var string */
    public $GitTag = null;
    
    /**  @var int - \ipeninsula\ServiceStatus */
    public $Status = null;
    
    /**  @var int */
    public $StartTime = null;
    
    /**  @var \ipeninsula\StatResponse\CountersEntry[]  */
    public $Counters = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ipeninsula.StatResponse');

      // OPTIONAL STRING Name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING GitTag = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "GitTag";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM Status = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "Status";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\ipeninsula\ServiceStatus';
      $descriptor->addField($f);

      // OPTIONAL INT32 StartTime = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "StartTime";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE Counters = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "Counters";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\ipeninsula\StatResponse\CountersEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Name> value
     *
     * @return \ipeninsula\StatResponse
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <Name> value
     *
     * @param string $value
     * @return \ipeninsula\StatResponse
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <GitTag> has a value
     *
     * @return boolean
     */
    public function hasGitTag(){
      return $this->_has(2);
    }
    
    /**
     * Clear <GitTag> value
     *
     * @return \ipeninsula\StatResponse
     */
    public function clearGitTag(){
      return $this->_clear(2);
    }
    
    /**
     * Get <GitTag> value
     *
     * @return string
     */
    public function getGitTag(){
      return $this->_get(2);
    }
    
    /**
     * Set <GitTag> value
     *
     * @param string $value
     * @return \ipeninsula\StatResponse
     */
    public function setGitTag( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <Status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(3);
    }
    
    /**
     * Clear <Status> value
     *
     * @return \ipeninsula\StatResponse
     */
    public function clearStatus(){
      return $this->_clear(3);
    }
    
    /**
     * Get <Status> value
     *
     * @return int - \ipeninsula\ServiceStatus
     */
    public function getStatus(){
      return $this->_get(3);
    }
    
    /**
     * Set <Status> value
     *
     * @param int - \ipeninsula\ServiceStatus $value
     * @return \ipeninsula\StatResponse
     */
    public function setStatus( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <StartTime> has a value
     *
     * @return boolean
     */
    public function hasStartTime(){
      return $this->_has(4);
    }
    
    /**
     * Clear <StartTime> value
     *
     * @return \ipeninsula\StatResponse
     */
    public function clearStartTime(){
      return $this->_clear(4);
    }
    
    /**
     * Get <StartTime> value
     *
     * @return int
     */
    public function getStartTime(){
      return $this->_get(4);
    }
    
    /**
     * Set <StartTime> value
     *
     * @param int $value
     * @return \ipeninsula\StatResponse
     */
    public function setStartTime( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <Counters> has a value
     *
     * @return boolean
     */
    public function hasCounters(){
      return $this->_has(5);
    }
    
    /**
     * Clear <Counters> value
     *
     * @return \ipeninsula\StatResponse
     */
    public function clearCounters(){
      return $this->_clear(5);
    }
    
    /**
     * Get <Counters> value
     *
     * @param int $idx
     * @return \ipeninsula\StatResponse\CountersEntry
     */
    public function getCounters($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <Counters> value
     *
     * @param \ipeninsula\StatResponse\CountersEntry $value
     * @return \ipeninsula\StatResponse
     */
    public function setCounters(\ipeninsula\StatResponse\CountersEntry $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <Counters>
     *
     * @return \ipeninsula\StatResponse\CountersEntry[]
     */
    public function getCountersList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <Counters>
     *
     * @param \ipeninsula\StatResponse\CountersEntry $value
     * @return \ipeninsula\StatResponse
     */
    public function addCounters(\ipeninsula\StatResponse\CountersEntry $value){
     return $this->_add(5, $value);
    }
  }
}

namespace ipeninsula {

  class EmptyMessage extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ipeninsula.EmptyMessage');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace ipeninsula {

  class StatServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param ipeninsula\EmptyMessage $input
     */
    public function Stat(\ipeninsula\EmptyMessage $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ipeninsula.StatService/Stat', $argument, '\ipeninsula\StatResponse::deserialize', $metadata, $options);
    }
  }
}
