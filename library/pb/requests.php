<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: github.com/AgilaNews/goshare/ipeninsula/requests.proto
//   Date: 2016-12-25 07:36:41

namespace ipeninsula {

  class NetworkStatus extends \DrSlump\Protobuf\Enum {
    const NET_Unknown = 0;
    const CELLAR_2G = 1;
    const CELLAR_3G = 2;
    const CELLAR_4G = 3;
    const WIFI = 4;
  }
}
namespace ipeninsula {

  class Language extends \DrSlump\Protobuf\Enum {
    const LANG_Unknown = 0;
    const CN = 1;
    const KR = 2;
    const EN = 3;
  }
}
namespace ipeninsula {

  class OS extends \DrSlump\Protobuf\Enum {
    const OS_Unknown = 0;
    const Android = 1;
    const Ios = 2;
    const Pc = 3;
  }
}
namespace ipeninsula\RequestContext {

  class AbGroupsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ipeninsula.RequestContext.AbGroupsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \ipeninsula\RequestContext\AbGroupsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \ipeninsula\RequestContext\AbGroupsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \ipeninsula\RequestContext\AbGroupsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \ipeninsula\RequestContext\AbGroupsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace ipeninsula {

  class RequestContext extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $ProductId = null;
    
    /**  @var string */
    public $UserId = null;
    
    /**  @var string */
    public $DeviceId = null;
    
    /**  @var string */
    public $SessionId = null;
    
    /**  @var string */
    public $UserAgent = null;
    
    /**  @var string */
    public $ClientIp = null;
    
    /**  @var int - \ipeninsula\NetworkStatus */
    public $Net = null;
    
    /**  @var string */
    public $Isp = null;
    
    /**  @var int - \ipeninsula\Language */
    public $Language = null;
    
    /**  @var string */
    public $ClientVersion = null;
    
    /**  @var int - \ipeninsula\OS */
    public $Os = null;
    
    /**  @var string */
    public $OsVersion = null;
    
    /**  @var float */
    public $Longitude = null;
    
    /**  @var float */
    public $Latitude = null;
    
    /**  @var int */
    public $TimeZone = null;
    
    /**  @var int */
    public $ScreenWidth = null;
    
    /**  @var int */
    public $ScreenHeight = null;
    
    /**  @var int */
    public $Dpi = null;
    
    /**  @var int */
    public $TraceId = null;
    
    /**  @var \ipeninsula\RequestContext\AbGroupsEntry[]  */
    public $AbGroups = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ipeninsula.RequestContext');

      // OPTIONAL STRING ProductId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ProductId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING UserId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "UserId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING DeviceId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "DeviceId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING SessionId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "SessionId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING UserAgent = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "UserAgent";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING ClientIp = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "ClientIp";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM Net = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "Net";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\ipeninsula\NetworkStatus';
      $descriptor->addField($f);

      // OPTIONAL STRING Isp = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "Isp";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM Language = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "Language";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\ipeninsula\Language';
      $descriptor->addField($f);

      // OPTIONAL STRING ClientVersion = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "ClientVersion";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM Os = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "Os";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\ipeninsula\OS';
      $descriptor->addField($f);

      // OPTIONAL STRING OsVersion = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "OsVersion";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT Longitude = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "Longitude";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT Latitude = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "Latitude";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 TimeZone = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "TimeZone";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 ScreenWidth = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "ScreenWidth";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 ScreenHeight = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "ScreenHeight";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 Dpi = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "Dpi";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 TraceId = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "TraceId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE AbGroups = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "AbGroups";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\ipeninsula\RequestContext\AbGroupsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ProductId> has a value
     *
     * @return boolean
     */
    public function hasProductId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ProductId> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearProductId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ProductId> value
     *
     * @return string
     */
    public function getProductId(){
      return $this->_get(1);
    }
    
    /**
     * Set <ProductId> value
     *
     * @param string $value
     * @return \ipeninsula\RequestContext
     */
    public function setProductId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <UserId> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <UserId> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearUserId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <UserId> value
     *
     * @return string
     */
    public function getUserId(){
      return $this->_get(2);
    }
    
    /**
     * Set <UserId> value
     *
     * @param string $value
     * @return \ipeninsula\RequestContext
     */
    public function setUserId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <DeviceId> has a value
     *
     * @return boolean
     */
    public function hasDeviceId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <DeviceId> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearDeviceId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <DeviceId> value
     *
     * @return string
     */
    public function getDeviceId(){
      return $this->_get(3);
    }
    
    /**
     * Set <DeviceId> value
     *
     * @param string $value
     * @return \ipeninsula\RequestContext
     */
    public function setDeviceId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <SessionId> has a value
     *
     * @return boolean
     */
    public function hasSessionId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <SessionId> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearSessionId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <SessionId> value
     *
     * @return string
     */
    public function getSessionId(){
      return $this->_get(4);
    }
    
    /**
     * Set <SessionId> value
     *
     * @param string $value
     * @return \ipeninsula\RequestContext
     */
    public function setSessionId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <UserAgent> has a value
     *
     * @return boolean
     */
    public function hasUserAgent(){
      return $this->_has(5);
    }
    
    /**
     * Clear <UserAgent> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearUserAgent(){
      return $this->_clear(5);
    }
    
    /**
     * Get <UserAgent> value
     *
     * @return string
     */
    public function getUserAgent(){
      return $this->_get(5);
    }
    
    /**
     * Set <UserAgent> value
     *
     * @param string $value
     * @return \ipeninsula\RequestContext
     */
    public function setUserAgent( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <ClientIp> has a value
     *
     * @return boolean
     */
    public function hasClientIp(){
      return $this->_has(6);
    }
    
    /**
     * Clear <ClientIp> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearClientIp(){
      return $this->_clear(6);
    }
    
    /**
     * Get <ClientIp> value
     *
     * @return string
     */
    public function getClientIp(){
      return $this->_get(6);
    }
    
    /**
     * Set <ClientIp> value
     *
     * @param string $value
     * @return \ipeninsula\RequestContext
     */
    public function setClientIp( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <Net> has a value
     *
     * @return boolean
     */
    public function hasNet(){
      return $this->_has(7);
    }
    
    /**
     * Clear <Net> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearNet(){
      return $this->_clear(7);
    }
    
    /**
     * Get <Net> value
     *
     * @return int - \ipeninsula\NetworkStatus
     */
    public function getNet(){
      return $this->_get(7);
    }
    
    /**
     * Set <Net> value
     *
     * @param int - \ipeninsula\NetworkStatus $value
     * @return \ipeninsula\RequestContext
     */
    public function setNet( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <Isp> has a value
     *
     * @return boolean
     */
    public function hasIsp(){
      return $this->_has(8);
    }
    
    /**
     * Clear <Isp> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearIsp(){
      return $this->_clear(8);
    }
    
    /**
     * Get <Isp> value
     *
     * @return string
     */
    public function getIsp(){
      return $this->_get(8);
    }
    
    /**
     * Set <Isp> value
     *
     * @param string $value
     * @return \ipeninsula\RequestContext
     */
    public function setIsp( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <Language> has a value
     *
     * @return boolean
     */
    public function hasLanguage(){
      return $this->_has(9);
    }
    
    /**
     * Clear <Language> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearLanguage(){
      return $this->_clear(9);
    }
    
    /**
     * Get <Language> value
     *
     * @return int - \ipeninsula\Language
     */
    public function getLanguage(){
      return $this->_get(9);
    }
    
    /**
     * Set <Language> value
     *
     * @param int - \ipeninsula\Language $value
     * @return \ipeninsula\RequestContext
     */
    public function setLanguage( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <ClientVersion> has a value
     *
     * @return boolean
     */
    public function hasClientVersion(){
      return $this->_has(10);
    }
    
    /**
     * Clear <ClientVersion> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearClientVersion(){
      return $this->_clear(10);
    }
    
    /**
     * Get <ClientVersion> value
     *
     * @return string
     */
    public function getClientVersion(){
      return $this->_get(10);
    }
    
    /**
     * Set <ClientVersion> value
     *
     * @param string $value
     * @return \ipeninsula\RequestContext
     */
    public function setClientVersion( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <Os> has a value
     *
     * @return boolean
     */
    public function hasOs(){
      return $this->_has(11);
    }
    
    /**
     * Clear <Os> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearOs(){
      return $this->_clear(11);
    }
    
    /**
     * Get <Os> value
     *
     * @return int - \ipeninsula\OS
     */
    public function getOs(){
      return $this->_get(11);
    }
    
    /**
     * Set <Os> value
     *
     * @param int - \ipeninsula\OS $value
     * @return \ipeninsula\RequestContext
     */
    public function setOs( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <OsVersion> has a value
     *
     * @return boolean
     */
    public function hasOsVersion(){
      return $this->_has(12);
    }
    
    /**
     * Clear <OsVersion> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearOsVersion(){
      return $this->_clear(12);
    }
    
    /**
     * Get <OsVersion> value
     *
     * @return string
     */
    public function getOsVersion(){
      return $this->_get(12);
    }
    
    /**
     * Set <OsVersion> value
     *
     * @param string $value
     * @return \ipeninsula\RequestContext
     */
    public function setOsVersion( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <Longitude> has a value
     *
     * @return boolean
     */
    public function hasLongitude(){
      return $this->_has(13);
    }
    
    /**
     * Clear <Longitude> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearLongitude(){
      return $this->_clear(13);
    }
    
    /**
     * Get <Longitude> value
     *
     * @return float
     */
    public function getLongitude(){
      return $this->_get(13);
    }
    
    /**
     * Set <Longitude> value
     *
     * @param float $value
     * @return \ipeninsula\RequestContext
     */
    public function setLongitude( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <Latitude> has a value
     *
     * @return boolean
     */
    public function hasLatitude(){
      return $this->_has(14);
    }
    
    /**
     * Clear <Latitude> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearLatitude(){
      return $this->_clear(14);
    }
    
    /**
     * Get <Latitude> value
     *
     * @return float
     */
    public function getLatitude(){
      return $this->_get(14);
    }
    
    /**
     * Set <Latitude> value
     *
     * @param float $value
     * @return \ipeninsula\RequestContext
     */
    public function setLatitude( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <TimeZone> has a value
     *
     * @return boolean
     */
    public function hasTimeZone(){
      return $this->_has(15);
    }
    
    /**
     * Clear <TimeZone> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearTimeZone(){
      return $this->_clear(15);
    }
    
    /**
     * Get <TimeZone> value
     *
     * @return int
     */
    public function getTimeZone(){
      return $this->_get(15);
    }
    
    /**
     * Set <TimeZone> value
     *
     * @param int $value
     * @return \ipeninsula\RequestContext
     */
    public function setTimeZone( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <ScreenWidth> has a value
     *
     * @return boolean
     */
    public function hasScreenWidth(){
      return $this->_has(16);
    }
    
    /**
     * Clear <ScreenWidth> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearScreenWidth(){
      return $this->_clear(16);
    }
    
    /**
     * Get <ScreenWidth> value
     *
     * @return int
     */
    public function getScreenWidth(){
      return $this->_get(16);
    }
    
    /**
     * Set <ScreenWidth> value
     *
     * @param int $value
     * @return \ipeninsula\RequestContext
     */
    public function setScreenWidth( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <ScreenHeight> has a value
     *
     * @return boolean
     */
    public function hasScreenHeight(){
      return $this->_has(17);
    }
    
    /**
     * Clear <ScreenHeight> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearScreenHeight(){
      return $this->_clear(17);
    }
    
    /**
     * Get <ScreenHeight> value
     *
     * @return int
     */
    public function getScreenHeight(){
      return $this->_get(17);
    }
    
    /**
     * Set <ScreenHeight> value
     *
     * @param int $value
     * @return \ipeninsula\RequestContext
     */
    public function setScreenHeight( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <Dpi> has a value
     *
     * @return boolean
     */
    public function hasDpi(){
      return $this->_has(18);
    }
    
    /**
     * Clear <Dpi> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearDpi(){
      return $this->_clear(18);
    }
    
    /**
     * Get <Dpi> value
     *
     * @return int
     */
    public function getDpi(){
      return $this->_get(18);
    }
    
    /**
     * Set <Dpi> value
     *
     * @param int $value
     * @return \ipeninsula\RequestContext
     */
    public function setDpi( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <TraceId> has a value
     *
     * @return boolean
     */
    public function hasTraceId(){
      return $this->_has(19);
    }
    
    /**
     * Clear <TraceId> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearTraceId(){
      return $this->_clear(19);
    }
    
    /**
     * Get <TraceId> value
     *
     * @return int
     */
    public function getTraceId(){
      return $this->_get(19);
    }
    
    /**
     * Set <TraceId> value
     *
     * @param int $value
     * @return \ipeninsula\RequestContext
     */
    public function setTraceId( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <AbGroups> has a value
     *
     * @return boolean
     */
    public function hasAbGroups(){
      return $this->_has(20);
    }
    
    /**
     * Clear <AbGroups> value
     *
     * @return \ipeninsula\RequestContext
     */
    public function clearAbGroups(){
      return $this->_clear(20);
    }
    
    /**
     * Get <AbGroups> value
     *
     * @param int $idx
     * @return \ipeninsula\RequestContext\AbGroupsEntry
     */
    public function getAbGroups($idx = NULL){
      return $this->_get(20, $idx);
    }
    
    /**
     * Set <AbGroups> value
     *
     * @param \ipeninsula\RequestContext\AbGroupsEntry $value
     * @return \ipeninsula\RequestContext
     */
    public function setAbGroups(\ipeninsula\RequestContext\AbGroupsEntry $value, $idx = NULL){
      return $this->_set(20, $value, $idx);
    }
    
    /**
     * Get all elements of <AbGroups>
     *
     * @return \ipeninsula\RequestContext\AbGroupsEntry[]
     */
    public function getAbGroupsList(){
     return $this->_get(20);
    }
    
    /**
     * Add a new element to <AbGroups>
     *
     * @param \ipeninsula\RequestContext\AbGroupsEntry $value
     * @return \ipeninsula\RequestContext
     */
    public function addAbGroups(\ipeninsula\RequestContext\AbGroupsEntry $value){
     return $this->_add(20, $value);
    }
  }
}

