<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: bloomfilter.proto
//   Date: 2016-12-13 10:37:26

namespace bloomiface {

  class BloomFilterType extends \DrSlump\Protobuf\Enum {
    const CLASSIC = 0;
    const ROTATED = 1;
  }
}
namespace bloomiface {

  class DumpRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $Name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bloomiface.DumpRequest');

      // OPTIONAL STRING Name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Name> value
     *
     * @return \bloomiface\DumpRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <Name> value
     *
     * @param string $value
     * @return \bloomiface\DumpRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace bloomiface {

  class ReloadRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $Name = null;
    
    /**  @var string */
    public $Path = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bloomiface.ReloadRequest');

      // OPTIONAL STRING Name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING Path = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "Path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Name> value
     *
     * @return \bloomiface\ReloadRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <Name> value
     *
     * @param string $value
     * @return \bloomiface\ReloadRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <Path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(2);
    }
    
    /**
     * Clear <Path> value
     *
     * @return \bloomiface\ReloadRequest
     */
    public function clearPath(){
      return $this->_clear(2);
    }
    
    /**
     * Get <Path> value
     *
     * @return string
     */
    public function getPath(){
      return $this->_get(2);
    }
    
    /**
     * Set <Path> value
     *
     * @param string $value
     * @return \bloomiface\ReloadRequest
     */
    public function setPath( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace bloomiface {

  class AddRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $Name = null;
    
    /**  @var string[]  */
    public $Keys = array();
    
    /**  @var boolean */
    public $Async = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bloomiface.AddRequest');

      // OPTIONAL STRING Name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING Keys = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "Keys";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BOOL Async = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "Async";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Name> value
     *
     * @return \bloomiface\AddRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <Name> value
     *
     * @param string $value
     * @return \bloomiface\AddRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <Keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(2);
    }
    
    /**
     * Clear <Keys> value
     *
     * @return \bloomiface\AddRequest
     */
    public function clearKeys(){
      return $this->_clear(2);
    }
    
    /**
     * Get <Keys> value
     *
     * @param int $idx
     * @return string
     */
    public function getKeys($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <Keys> value
     *
     * @param string $value
     * @return \bloomiface\AddRequest
     */
    public function setKeys( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <Keys>
     *
     * @return string[]
     */
    public function getKeysList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <Keys>
     *
     * @param string $value
     * @return \bloomiface\AddRequest
     */
    public function addKeys( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <Async> has a value
     *
     * @return boolean
     */
    public function hasAsync(){
      return $this->_has(3);
    }
    
    /**
     * Clear <Async> value
     *
     * @return \bloomiface\AddRequest
     */
    public function clearAsync(){
      return $this->_clear(3);
    }
    
    /**
     * Get <Async> value
     *
     * @return boolean
     */
    public function getAsync(){
      return $this->_get(3);
    }
    
    /**
     * Set <Async> value
     *
     * @param boolean $value
     * @return \bloomiface\AddRequest
     */
    public function setAsync( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace bloomiface {

  class TestRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $Name = null;
    
    /**  @var string[]  */
    public $Keys = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bloomiface.TestRequest');

      // OPTIONAL STRING Name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING Keys = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "Keys";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Name> value
     *
     * @return \bloomiface\TestRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <Name> value
     *
     * @param string $value
     * @return \bloomiface\TestRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <Keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(2);
    }
    
    /**
     * Clear <Keys> value
     *
     * @return \bloomiface\TestRequest
     */
    public function clearKeys(){
      return $this->_clear(2);
    }
    
    /**
     * Get <Keys> value
     *
     * @param int $idx
     * @return string
     */
    public function getKeys($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <Keys> value
     *
     * @param string $value
     * @return \bloomiface\TestRequest
     */
    public function setKeys( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <Keys>
     *
     * @return string[]
     */
    public function getKeysList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <Keys>
     *
     * @param string $value
     * @return \bloomiface\TestRequest
     */
    public function addKeys( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace bloomiface {

  class TestResponse extends \DrSlump\Protobuf\Message {

    /**  @var boolean[]  */
    public $Exists = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bloomiface.TestResponse');

      // REPEATED BOOL Exists = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Exists";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Exists> has a value
     *
     * @return boolean
     */
    public function hasExists(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Exists> value
     *
     * @return \bloomiface\TestResponse
     */
    public function clearExists(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Exists> value
     *
     * @param int $idx
     * @return boolean
     */
    public function getExists($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <Exists> value
     *
     * @param boolean $value
     * @return \bloomiface\TestResponse
     */
    public function setExists( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <Exists>
     *
     * @return boolean[]
     */
    public function getExistsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <Exists>
     *
     * @param boolean $value
     * @return \bloomiface\TestResponse
     */
    public function addExists( $value){
     return $this->_add(1, $value);
    }
  }
}

namespace bloomiface {

  class InfoResponse extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $Capacity = null;
    
    /**  @var int */
    public $ErrorRate = null;
    
    /**  @var int */
    public $HashFunc = null;
    
    /**  @var int */
    public $Keys = null;
    
    /**  @var int */
    public $Storage = null;
    
    /**  @var float */
    public $FillRate = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bloomiface.InfoResponse');

      // OPTIONAL INT32 Capacity = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Capacity";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 ErrorRate = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "ErrorRate";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 HashFunc = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "HashFunc";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 Keys = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "Keys";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 Storage = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "Storage";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT FillRate = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "FillRate";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Capacity> has a value
     *
     * @return boolean
     */
    public function hasCapacity(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Capacity> value
     *
     * @return \bloomiface\InfoResponse
     */
    public function clearCapacity(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Capacity> value
     *
     * @return int
     */
    public function getCapacity(){
      return $this->_get(1);
    }
    
    /**
     * Set <Capacity> value
     *
     * @param int $value
     * @return \bloomiface\InfoResponse
     */
    public function setCapacity( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <ErrorRate> has a value
     *
     * @return boolean
     */
    public function hasErrorRate(){
      return $this->_has(2);
    }
    
    /**
     * Clear <ErrorRate> value
     *
     * @return \bloomiface\InfoResponse
     */
    public function clearErrorRate(){
      return $this->_clear(2);
    }
    
    /**
     * Get <ErrorRate> value
     *
     * @return int
     */
    public function getErrorRate(){
      return $this->_get(2);
    }
    
    /**
     * Set <ErrorRate> value
     *
     * @param int $value
     * @return \bloomiface\InfoResponse
     */
    public function setErrorRate( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <HashFunc> has a value
     *
     * @return boolean
     */
    public function hasHashFunc(){
      return $this->_has(3);
    }
    
    /**
     * Clear <HashFunc> value
     *
     * @return \bloomiface\InfoResponse
     */
    public function clearHashFunc(){
      return $this->_clear(3);
    }
    
    /**
     * Get <HashFunc> value
     *
     * @return int
     */
    public function getHashFunc(){
      return $this->_get(3);
    }
    
    /**
     * Set <HashFunc> value
     *
     * @param int $value
     * @return \bloomiface\InfoResponse
     */
    public function setHashFunc( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <Keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(4);
    }
    
    /**
     * Clear <Keys> value
     *
     * @return \bloomiface\InfoResponse
     */
    public function clearKeys(){
      return $this->_clear(4);
    }
    
    /**
     * Get <Keys> value
     *
     * @return int
     */
    public function getKeys(){
      return $this->_get(4);
    }
    
    /**
     * Set <Keys> value
     *
     * @param int $value
     * @return \bloomiface\InfoResponse
     */
    public function setKeys( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <Storage> has a value
     *
     * @return boolean
     */
    public function hasStorage(){
      return $this->_has(5);
    }
    
    /**
     * Clear <Storage> value
     *
     * @return \bloomiface\InfoResponse
     */
    public function clearStorage(){
      return $this->_clear(5);
    }
    
    /**
     * Get <Storage> value
     *
     * @return int
     */
    public function getStorage(){
      return $this->_get(5);
    }
    
    /**
     * Set <Storage> value
     *
     * @param int $value
     * @return \bloomiface\InfoResponse
     */
    public function setStorage( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <FillRate> has a value
     *
     * @return boolean
     */
    public function hasFillRate(){
      return $this->_has(6);
    }
    
    /**
     * Clear <FillRate> value
     *
     * @return \bloomiface\InfoResponse
     */
    public function clearFillRate(){
      return $this->_clear(6);
    }
    
    /**
     * Get <FillRate> value
     *
     * @return float
     */
    public function getFillRate(){
      return $this->_get(6);
    }
    
    /**
     * Set <FillRate> value
     *
     * @param float $value
     * @return \bloomiface\InfoResponse
     */
    public function setFillRate( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace bloomiface {

  class EmptyMessage extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bloomiface.EmptyMessage');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace bloomiface\NewBloomFilterRequest {

  class FilterType extends \DrSlump\Protobuf\Enum {
    const CLASSIC = 0;
    const ROTATED = 1;
  }
}
namespace bloomiface {

  class NewBloomFilterRequest extends \DrSlump\Protobuf\Message {

    /**  @var int - \bloomiface\NewBloomFilterRequest\FilterType */
    public $Type = null;
    
    /**  @var string */
    public $Name = null;
    
    /**  @var int */
    public $N = null;
    
    /**  @var float */
    public $ErrorRate = null;
    
    /**  @var int */
    public $R = null;
    
    /**  @var int */
    public $Interval = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bloomiface.NewBloomFilterRequest');

      // OPTIONAL ENUM Type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\bloomiface\NewBloomFilterRequest\FilterType';
      $descriptor->addField($f);

      // OPTIONAL STRING Name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "Name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 N = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "N";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE ErrorRate = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "ErrorRate";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 R = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "R";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 Interval = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "Interval";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Type> value
     *
     * @return \bloomiface\NewBloomFilterRequest
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Type> value
     *
     * @return int - \bloomiface\NewBloomFilterRequest\FilterType
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <Type> value
     *
     * @param int - \bloomiface\NewBloomFilterRequest\FilterType $value
     * @return \bloomiface\NewBloomFilterRequest
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <Name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <Name> value
     *
     * @return \bloomiface\NewBloomFilterRequest
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <Name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <Name> value
     *
     * @param string $value
     * @return \bloomiface\NewBloomFilterRequest
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <N> has a value
     *
     * @return boolean
     */
    public function hasN(){
      return $this->_has(3);
    }
    
    /**
     * Clear <N> value
     *
     * @return \bloomiface\NewBloomFilterRequest
     */
    public function clearN(){
      return $this->_clear(3);
    }
    
    /**
     * Get <N> value
     *
     * @return int
     */
    public function getN(){
      return $this->_get(3);
    }
    
    /**
     * Set <N> value
     *
     * @param int $value
     * @return \bloomiface\NewBloomFilterRequest
     */
    public function setN( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <ErrorRate> has a value
     *
     * @return boolean
     */
    public function hasErrorRate(){
      return $this->_has(4);
    }
    
    /**
     * Clear <ErrorRate> value
     *
     * @return \bloomiface\NewBloomFilterRequest
     */
    public function clearErrorRate(){
      return $this->_clear(4);
    }
    
    /**
     * Get <ErrorRate> value
     *
     * @return float
     */
    public function getErrorRate(){
      return $this->_get(4);
    }
    
    /**
     * Set <ErrorRate> value
     *
     * @param float $value
     * @return \bloomiface\NewBloomFilterRequest
     */
    public function setErrorRate( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <R> has a value
     *
     * @return boolean
     */
    public function hasR(){
      return $this->_has(5);
    }
    
    /**
     * Clear <R> value
     *
     * @return \bloomiface\NewBloomFilterRequest
     */
    public function clearR(){
      return $this->_clear(5);
    }
    
    /**
     * Get <R> value
     *
     * @return int
     */
    public function getR(){
      return $this->_get(5);
    }
    
    /**
     * Set <R> value
     *
     * @param int $value
     * @return \bloomiface\NewBloomFilterRequest
     */
    public function setR( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <Interval> has a value
     *
     * @return boolean
     */
    public function hasInterval(){
      return $this->_has(6);
    }
    
    /**
     * Clear <Interval> value
     *
     * @return \bloomiface\NewBloomFilterRequest
     */
    public function clearInterval(){
      return $this->_clear(6);
    }
    
    /**
     * Get <Interval> value
     *
     * @return int
     */
    public function getInterval(){
      return $this->_get(6);
    }
    
    /**
     * Set <Interval> value
     *
     * @param int $value
     * @return \bloomiface\NewBloomFilterRequest
     */
    public function setInterval( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace bloomiface {

  class BloomFilterServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param bloomiface\AddRequest $input
     */
    public function Add(\bloomiface\AddRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/bloomiface.BloomFilterService/Add', $argument, '\bloomiface\EmptyMessage::deserialize', $metadata, $options);
    }
    /**
     * @param bloomiface\TestRequest $input
     */
    public function Test(\bloomiface\TestRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/bloomiface.BloomFilterService/Test', $argument, '\bloomiface\TestResponse::deserialize', $metadata, $options);
    }
    /**
     * @param bloomiface\DumpRequest $input
     */
    public function Dump(\bloomiface\DumpRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/bloomiface.BloomFilterService/Dump', $argument, '\bloomiface\EmptyMessage::deserialize', $metadata, $options);
    }
    /**
     * @param bloomiface\ReloadRequest $input
     */
    public function Reload(\bloomiface\ReloadRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/bloomiface.BloomFilterService/Reload', $argument, '\bloomiface\EmptyMessage::deserialize', $metadata, $options);
    }
    /**
     * @param bloomiface\NewBloomFilterRequest $input
     */
    public function Create(\bloomiface\NewBloomFilterRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/bloomiface.BloomFilterService/Create', $argument, '\bloomiface\EmptyMessage::deserialize', $metadata, $options);
    }
    /**
     * @param bloomiface\EmptyMessage $input
     */
    public function Info(\bloomiface\EmptyMessage $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/bloomiface.BloomFilterService/Info', $argument, '\bloomiface\InfoResponse::deserialize', $metadata, $options);
    }
  }
}
