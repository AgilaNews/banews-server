<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: abtest.proto
//   Date: 2016-11-15 14:14:58

namespace iface {

  class SplitField extends \DrSlump\Protobuf\Enum {
    const ALL = 0;
    const USER = 1;
    const DEVICE = 2;
  }
}
namespace iface {

  class TestGroup extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $Tag = null;
    
    /**  @var int */
    public $Start = null;
    
    /**  @var int */
    public $End = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.TestGroup');

      // OPTIONAL STRING Tag = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Tag";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 Start = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "Start";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 End = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "End";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Tag> has a value
     *
     * @return boolean
     */
    public function hasTag(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Tag> value
     *
     * @return \iface\TestGroup
     */
    public function clearTag(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Tag> value
     *
     * @return string
     */
    public function getTag(){
      return $this->_get(1);
    }
    
    /**
     * Set <Tag> value
     *
     * @param string $value
     * @return \iface\TestGroup
     */
    public function setTag( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <Start> has a value
     *
     * @return boolean
     */
    public function hasStart(){
      return $this->_has(2);
    }
    
    /**
     * Clear <Start> value
     *
     * @return \iface\TestGroup
     */
    public function clearStart(){
      return $this->_clear(2);
    }
    
    /**
     * Get <Start> value
     *
     * @return int
     */
    public function getStart(){
      return $this->_get(2);
    }
    
    /**
     * Set <Start> value
     *
     * @param int $value
     * @return \iface\TestGroup
     */
    public function setStart( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <End> has a value
     *
     * @return boolean
     */
    public function hasEnd(){
      return $this->_has(3);
    }
    
    /**
     * Clear <End> value
     *
     * @return \iface\TestGroup
     */
    public function clearEnd(){
      return $this->_clear(3);
    }
    
    /**
     * Get <End> value
     *
     * @return int
     */
    public function getEnd(){
      return $this->_get(3);
    }
    
    /**
     * Set <End> value
     *
     * @param int $value
     * @return \iface\TestGroup
     */
    public function setEnd( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace iface {

  class Experiment extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $Name = null;
    
    /**  @var int - \iface\SplitField */
    public $Field = null;
    
    /**  @var int */
    public $TrafficSplitCount = null;
    
    /**  @var \iface\TestGroup[]  */
    public $Groups = array();
    
    /**  @var int[]  */
    public $Slots = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.Experiment');

      // OPTIONAL STRING Name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM Field = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "Field";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\iface\SplitField';
      $descriptor->addField($f);

      // OPTIONAL UINT32 TrafficSplitCount = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "TrafficSplitCount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE Groups = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "Groups";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\iface\TestGroup';
      $descriptor->addField($f);

      // REPEATED INT32 Slots = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "Slots";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Name> value
     *
     * @return \iface\Experiment
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <Name> value
     *
     * @param string $value
     * @return \iface\Experiment
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <Field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(2);
    }
    
    /**
     * Clear <Field> value
     *
     * @return \iface\Experiment
     */
    public function clearField(){
      return $this->_clear(2);
    }
    
    /**
     * Get <Field> value
     *
     * @return int - \iface\SplitField
     */
    public function getField(){
      return $this->_get(2);
    }
    
    /**
     * Set <Field> value
     *
     * @param int - \iface\SplitField $value
     * @return \iface\Experiment
     */
    public function setField( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <TrafficSplitCount> has a value
     *
     * @return boolean
     */
    public function hasTrafficSplitCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <TrafficSplitCount> value
     *
     * @return \iface\Experiment
     */
    public function clearTrafficSplitCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <TrafficSplitCount> value
     *
     * @return int
     */
    public function getTrafficSplitCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <TrafficSplitCount> value
     *
     * @param int $value
     * @return \iface\Experiment
     */
    public function setTrafficSplitCount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <Groups> has a value
     *
     * @return boolean
     */
    public function hasGroups(){
      return $this->_has(4);
    }
    
    /**
     * Clear <Groups> value
     *
     * @return \iface\Experiment
     */
    public function clearGroups(){
      return $this->_clear(4);
    }
    
    /**
     * Get <Groups> value
     *
     * @param int $idx
     * @return \iface\TestGroup
     */
    public function getGroups($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <Groups> value
     *
     * @param \iface\TestGroup $value
     * @return \iface\Experiment
     */
    public function setGroups(\iface\TestGroup $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <Groups>
     *
     * @return \iface\TestGroup[]
     */
    public function getGroupsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <Groups>
     *
     * @param \iface\TestGroup $value
     * @return \iface\Experiment
     */
    public function addGroups(\iface\TestGroup $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <Slots> has a value
     *
     * @return boolean
     */
    public function hasSlots(){
      return $this->_has(5);
    }
    
    /**
     * Clear <Slots> value
     *
     * @return \iface\Experiment
     */
    public function clearSlots(){
      return $this->_clear(5);
    }
    
    /**
     * Get <Slots> value
     *
     * @param int $idx
     * @return int
     */
    public function getSlots($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <Slots> value
     *
     * @param int $value
     * @return \iface\Experiment
     */
    public function setSlots( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <Slots>
     *
     * @return int[]
     */
    public function getSlotsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <Slots>
     *
     * @param int $value
     * @return \iface\Experiment
     */
    public function addSlots( $value){
     return $this->_add(5, $value);
    }
  }
}

namespace iface {

  class CreateExperimentRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $Product = null;
    
    /**  @var \iface\Experiment */
    public $Experiment = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.CreateExperimentRequest');

      // OPTIONAL STRING Product = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Product";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE Experiment = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "Experiment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\iface\Experiment';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Product> has a value
     *
     * @return boolean
     */
    public function hasProduct(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Product> value
     *
     * @return \iface\CreateExperimentRequest
     */
    public function clearProduct(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Product> value
     *
     * @return string
     */
    public function getProduct(){
      return $this->_get(1);
    }
    
    /**
     * Set <Product> value
     *
     * @param string $value
     * @return \iface\CreateExperimentRequest
     */
    public function setProduct( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <Experiment> has a value
     *
     * @return boolean
     */
    public function hasExperiment(){
      return $this->_has(2);
    }
    
    /**
     * Clear <Experiment> value
     *
     * @return \iface\CreateExperimentRequest
     */
    public function clearExperiment(){
      return $this->_clear(2);
    }
    
    /**
     * Get <Experiment> value
     *
     * @return \iface\Experiment
     */
    public function getExperiment(){
      return $this->_get(2);
    }
    
    /**
     * Set <Experiment> value
     *
     * @param \iface\Experiment $value
     * @return \iface\CreateExperimentRequest
     */
    public function setExperiment(\iface\Experiment $value){
      return $this->_set(2, $value);
    }
  }
}

namespace iface {

  class CreateExperimentResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.CreateExperimentResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace iface {

  class RequestContext extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $UserId = null;
    
    /**  @var string */
    public $DeviceId = null;
    
    /**  @var string */
    public $SessionId = null;
    
    /**  @var string */
    public $UserAgent = null;
    
    /**  @var string */
    public $ClientIp = null;
    
    /**  @var string */
    public $Net = null;
    
    /**  @var string */
    public $Isp = null;
    
    /**  @var string */
    public $Language = null;
    
    /**  @var string */
    public $ClientVersion = null;
    
    /**  @var string */
    public $Os = null;
    
    /**  @var string */
    public $OsVersion = null;
    
    /**  @var float */
    public $Longitude = null;
    
    /**  @var float */
    public $Latitude = null;
    
    /**  @var int */
    public $TimeZone = null;
    
    /**  @var int */
    public $ScreenWidth = null;
    
    /**  @var int */
    public $ScreenHeight = null;
    
    /**  @var int */
    public $Dpi = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.RequestContext');

      // OPTIONAL STRING UserId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "UserId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING DeviceId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "DeviceId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING SessionId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "SessionId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING UserAgent = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "UserAgent";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING ClientIp = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "ClientIp";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING Net = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "Net";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING Isp = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "Isp";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING Language = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "Language";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING ClientVersion = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "ClientVersion";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING Os = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "Os";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING OsVersion = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "OsVersion";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT Longitude = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "Longitude";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT Latitude = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "Latitude";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 TimeZone = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "TimeZone";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 ScreenWidth = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "ScreenWidth";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 ScreenHeight = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "ScreenHeight";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 Dpi = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "Dpi";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <UserId> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <UserId> value
     *
     * @return \iface\RequestContext
     */
    public function clearUserId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <UserId> value
     *
     * @return string
     */
    public function getUserId(){
      return $this->_get(2);
    }
    
    /**
     * Set <UserId> value
     *
     * @param string $value
     * @return \iface\RequestContext
     */
    public function setUserId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <DeviceId> has a value
     *
     * @return boolean
     */
    public function hasDeviceId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <DeviceId> value
     *
     * @return \iface\RequestContext
     */
    public function clearDeviceId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <DeviceId> value
     *
     * @return string
     */
    public function getDeviceId(){
      return $this->_get(3);
    }
    
    /**
     * Set <DeviceId> value
     *
     * @param string $value
     * @return \iface\RequestContext
     */
    public function setDeviceId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <SessionId> has a value
     *
     * @return boolean
     */
    public function hasSessionId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <SessionId> value
     *
     * @return \iface\RequestContext
     */
    public function clearSessionId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <SessionId> value
     *
     * @return string
     */
    public function getSessionId(){
      return $this->_get(4);
    }
    
    /**
     * Set <SessionId> value
     *
     * @param string $value
     * @return \iface\RequestContext
     */
    public function setSessionId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <UserAgent> has a value
     *
     * @return boolean
     */
    public function hasUserAgent(){
      return $this->_has(5);
    }
    
    /**
     * Clear <UserAgent> value
     *
     * @return \iface\RequestContext
     */
    public function clearUserAgent(){
      return $this->_clear(5);
    }
    
    /**
     * Get <UserAgent> value
     *
     * @return string
     */
    public function getUserAgent(){
      return $this->_get(5);
    }
    
    /**
     * Set <UserAgent> value
     *
     * @param string $value
     * @return \iface\RequestContext
     */
    public function setUserAgent( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <ClientIp> has a value
     *
     * @return boolean
     */
    public function hasClientIp(){
      return $this->_has(6);
    }
    
    /**
     * Clear <ClientIp> value
     *
     * @return \iface\RequestContext
     */
    public function clearClientIp(){
      return $this->_clear(6);
    }
    
    /**
     * Get <ClientIp> value
     *
     * @return string
     */
    public function getClientIp(){
      return $this->_get(6);
    }
    
    /**
     * Set <ClientIp> value
     *
     * @param string $value
     * @return \iface\RequestContext
     */
    public function setClientIp( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <Net> has a value
     *
     * @return boolean
     */
    public function hasNet(){
      return $this->_has(7);
    }
    
    /**
     * Clear <Net> value
     *
     * @return \iface\RequestContext
     */
    public function clearNet(){
      return $this->_clear(7);
    }
    
    /**
     * Get <Net> value
     *
     * @return string
     */
    public function getNet(){
      return $this->_get(7);
    }
    
    /**
     * Set <Net> value
     *
     * @param string $value
     * @return \iface\RequestContext
     */
    public function setNet( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <Isp> has a value
     *
     * @return boolean
     */
    public function hasIsp(){
      return $this->_has(8);
    }
    
    /**
     * Clear <Isp> value
     *
     * @return \iface\RequestContext
     */
    public function clearIsp(){
      return $this->_clear(8);
    }
    
    /**
     * Get <Isp> value
     *
     * @return string
     */
    public function getIsp(){
      return $this->_get(8);
    }
    
    /**
     * Set <Isp> value
     *
     * @param string $value
     * @return \iface\RequestContext
     */
    public function setIsp( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <Language> has a value
     *
     * @return boolean
     */
    public function hasLanguage(){
      return $this->_has(9);
    }
    
    /**
     * Clear <Language> value
     *
     * @return \iface\RequestContext
     */
    public function clearLanguage(){
      return $this->_clear(9);
    }
    
    /**
     * Get <Language> value
     *
     * @return string
     */
    public function getLanguage(){
      return $this->_get(9);
    }
    
    /**
     * Set <Language> value
     *
     * @param string $value
     * @return \iface\RequestContext
     */
    public function setLanguage( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <ClientVersion> has a value
     *
     * @return boolean
     */
    public function hasClientVersion(){
      return $this->_has(10);
    }
    
    /**
     * Clear <ClientVersion> value
     *
     * @return \iface\RequestContext
     */
    public function clearClientVersion(){
      return $this->_clear(10);
    }
    
    /**
     * Get <ClientVersion> value
     *
     * @return string
     */
    public function getClientVersion(){
      return $this->_get(10);
    }
    
    /**
     * Set <ClientVersion> value
     *
     * @param string $value
     * @return \iface\RequestContext
     */
    public function setClientVersion( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <Os> has a value
     *
     * @return boolean
     */
    public function hasOs(){
      return $this->_has(11);
    }
    
    /**
     * Clear <Os> value
     *
     * @return \iface\RequestContext
     */
    public function clearOs(){
      return $this->_clear(11);
    }
    
    /**
     * Get <Os> value
     *
     * @return string
     */
    public function getOs(){
      return $this->_get(11);
    }
    
    /**
     * Set <Os> value
     *
     * @param string $value
     * @return \iface\RequestContext
     */
    public function setOs( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <OsVersion> has a value
     *
     * @return boolean
     */
    public function hasOsVersion(){
      return $this->_has(12);
    }
    
    /**
     * Clear <OsVersion> value
     *
     * @return \iface\RequestContext
     */
    public function clearOsVersion(){
      return $this->_clear(12);
    }
    
    /**
     * Get <OsVersion> value
     *
     * @return string
     */
    public function getOsVersion(){
      return $this->_get(12);
    }
    
    /**
     * Set <OsVersion> value
     *
     * @param string $value
     * @return \iface\RequestContext
     */
    public function setOsVersion( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <Longitude> has a value
     *
     * @return boolean
     */
    public function hasLongitude(){
      return $this->_has(13);
    }
    
    /**
     * Clear <Longitude> value
     *
     * @return \iface\RequestContext
     */
    public function clearLongitude(){
      return $this->_clear(13);
    }
    
    /**
     * Get <Longitude> value
     *
     * @return float
     */
    public function getLongitude(){
      return $this->_get(13);
    }
    
    /**
     * Set <Longitude> value
     *
     * @param float $value
     * @return \iface\RequestContext
     */
    public function setLongitude( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <Latitude> has a value
     *
     * @return boolean
     */
    public function hasLatitude(){
      return $this->_has(14);
    }
    
    /**
     * Clear <Latitude> value
     *
     * @return \iface\RequestContext
     */
    public function clearLatitude(){
      return $this->_clear(14);
    }
    
    /**
     * Get <Latitude> value
     *
     * @return float
     */
    public function getLatitude(){
      return $this->_get(14);
    }
    
    /**
     * Set <Latitude> value
     *
     * @param float $value
     * @return \iface\RequestContext
     */
    public function setLatitude( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <TimeZone> has a value
     *
     * @return boolean
     */
    public function hasTimeZone(){
      return $this->_has(15);
    }
    
    /**
     * Clear <TimeZone> value
     *
     * @return \iface\RequestContext
     */
    public function clearTimeZone(){
      return $this->_clear(15);
    }
    
    /**
     * Get <TimeZone> value
     *
     * @return int
     */
    public function getTimeZone(){
      return $this->_get(15);
    }
    
    /**
     * Set <TimeZone> value
     *
     * @param int $value
     * @return \iface\RequestContext
     */
    public function setTimeZone( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <ScreenWidth> has a value
     *
     * @return boolean
     */
    public function hasScreenWidth(){
      return $this->_has(16);
    }
    
    /**
     * Clear <ScreenWidth> value
     *
     * @return \iface\RequestContext
     */
    public function clearScreenWidth(){
      return $this->_clear(16);
    }
    
    /**
     * Get <ScreenWidth> value
     *
     * @return int
     */
    public function getScreenWidth(){
      return $this->_get(16);
    }
    
    /**
     * Set <ScreenWidth> value
     *
     * @param int $value
     * @return \iface\RequestContext
     */
    public function setScreenWidth( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <ScreenHeight> has a value
     *
     * @return boolean
     */
    public function hasScreenHeight(){
      return $this->_has(17);
    }
    
    /**
     * Clear <ScreenHeight> value
     *
     * @return \iface\RequestContext
     */
    public function clearScreenHeight(){
      return $this->_clear(17);
    }
    
    /**
     * Get <ScreenHeight> value
     *
     * @return int
     */
    public function getScreenHeight(){
      return $this->_get(17);
    }
    
    /**
     * Set <ScreenHeight> value
     *
     * @param int $value
     * @return \iface\RequestContext
     */
    public function setScreenHeight( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <Dpi> has a value
     *
     * @return boolean
     */
    public function hasDpi(){
      return $this->_has(18);
    }
    
    /**
     * Clear <Dpi> value
     *
     * @return \iface\RequestContext
     */
    public function clearDpi(){
      return $this->_clear(18);
    }
    
    /**
     * Get <Dpi> value
     *
     * @return int
     */
    public function getDpi(){
      return $this->_get(18);
    }
    
    /**
     * Set <Dpi> value
     *
     * @param int $value
     * @return \iface\RequestContext
     */
    public function setDpi( $value){
      return $this->_set(18, $value);
    }
  }
}

namespace iface {

  class GetExperimentGroupRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $Product = null;
    
    /**  @var \iface\RequestContext */
    public $Context = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.GetExperimentGroupRequest');

      // OPTIONAL STRING Product = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Product";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE Context = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "Context";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\iface\RequestContext';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Product> has a value
     *
     * @return boolean
     */
    public function hasProduct(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Product> value
     *
     * @return \iface\GetExperimentGroupRequest
     */
    public function clearProduct(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Product> value
     *
     * @return string
     */
    public function getProduct(){
      return $this->_get(1);
    }
    
    /**
     * Set <Product> value
     *
     * @param string $value
     * @return \iface\GetExperimentGroupRequest
     */
    public function setProduct( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <Context> has a value
     *
     * @return boolean
     */
    public function hasContext(){
      return $this->_has(2);
    }
    
    /**
     * Clear <Context> value
     *
     * @return \iface\GetExperimentGroupRequest
     */
    public function clearContext(){
      return $this->_clear(2);
    }
    
    /**
     * Get <Context> value
     *
     * @return \iface\RequestContext
     */
    public function getContext(){
      return $this->_get(2);
    }
    
    /**
     * Set <Context> value
     *
     * @param \iface\RequestContext $value
     * @return \iface\GetExperimentGroupRequest
     */
    public function setContext(\iface\RequestContext $value){
      return $this->_set(2, $value);
    }
  }
}

namespace iface\GetExperimentGroupResponse {

  class GroupsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.GetExperimentGroupResponse.GroupsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \iface\GetExperimentGroupResponse\GroupsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \iface\GetExperimentGroupResponse\GroupsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \iface\GetExperimentGroupResponse\GroupsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \iface\GetExperimentGroupResponse\GroupsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace iface {

  class GetExperimentGroupResponse extends \DrSlump\Protobuf\Message {

    /**  @var \iface\GetExperimentGroupResponse\GroupsEntry[]  */
    public $Groups = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.GetExperimentGroupResponse');

      // REPEATED MESSAGE Groups = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Groups";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\iface\GetExperimentGroupResponse\GroupsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Groups> has a value
     *
     * @return boolean
     */
    public function hasGroups(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Groups> value
     *
     * @return \iface\GetExperimentGroupResponse
     */
    public function clearGroups(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Groups> value
     *
     * @param int $idx
     * @return \iface\GetExperimentGroupResponse\GroupsEntry
     */
    public function getGroups($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <Groups> value
     *
     * @param \iface\GetExperimentGroupResponse\GroupsEntry $value
     * @return \iface\GetExperimentGroupResponse
     */
    public function setGroups(\iface\GetExperimentGroupResponse\GroupsEntry $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <Groups>
     *
     * @return \iface\GetExperimentGroupResponse\GroupsEntry[]
     */
    public function getGroupsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <Groups>
     *
     * @param \iface\GetExperimentGroupResponse\GroupsEntry $value
     * @return \iface\GetExperimentGroupResponse
     */
    public function addGroups(\iface\GetExperimentGroupResponse\GroupsEntry $value){
     return $this->_add(1, $value);
    }
  }
}

namespace iface {

  class AdjustExperimentRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $Product = null;
    
    /**  @var string */
    public $ExperimentName = null;
    
    /**  @var \iface\TestGroup[]  */
    public $Groups = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.AdjustExperimentRequest');

      // OPTIONAL STRING Product = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Product";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING ExperimentName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "ExperimentName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE Groups = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "Groups";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\iface\TestGroup';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Product> has a value
     *
     * @return boolean
     */
    public function hasProduct(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Product> value
     *
     * @return \iface\AdjustExperimentRequest
     */
    public function clearProduct(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Product> value
     *
     * @return string
     */
    public function getProduct(){
      return $this->_get(1);
    }
    
    /**
     * Set <Product> value
     *
     * @param string $value
     * @return \iface\AdjustExperimentRequest
     */
    public function setProduct( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <ExperimentName> has a value
     *
     * @return boolean
     */
    public function hasExperimentName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <ExperimentName> value
     *
     * @return \iface\AdjustExperimentRequest
     */
    public function clearExperimentName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <ExperimentName> value
     *
     * @return string
     */
    public function getExperimentName(){
      return $this->_get(2);
    }
    
    /**
     * Set <ExperimentName> value
     *
     * @param string $value
     * @return \iface\AdjustExperimentRequest
     */
    public function setExperimentName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <Groups> has a value
     *
     * @return boolean
     */
    public function hasGroups(){
      return $this->_has(3);
    }
    
    /**
     * Clear <Groups> value
     *
     * @return \iface\AdjustExperimentRequest
     */
    public function clearGroups(){
      return $this->_clear(3);
    }
    
    /**
     * Get <Groups> value
     *
     * @param int $idx
     * @return \iface\TestGroup
     */
    public function getGroups($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <Groups> value
     *
     * @param \iface\TestGroup $value
     * @return \iface\AdjustExperimentRequest
     */
    public function setGroups(\iface\TestGroup $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <Groups>
     *
     * @return \iface\TestGroup[]
     */
    public function getGroupsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <Groups>
     *
     * @param \iface\TestGroup $value
     * @return \iface\AdjustExperimentRequest
     */
    public function addGroups(\iface\TestGroup $value){
     return $this->_add(3, $value);
    }
  }
}

namespace iface {

  class AdjustExperimentResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.AdjustExperimentResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace iface {

  class InfoRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.InfoRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace iface\ExperimentInfo {

  class HitsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var int */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.ExperimentInfo.HitsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \iface\ExperimentInfo\HitsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \iface\ExperimentInfo\HitsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \iface\ExperimentInfo\HitsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return int
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param int $value
     * @return \iface\ExperimentInfo\HitsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace iface {

  class ExperimentInfo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $Name = null;
    
    /**  @var int */
    public $Visit = null;
    
    /**  @var \iface\ExperimentInfo\HitsEntry[]  */
    public $Hits = array();
    
    /**  @var \iface\TestGroup[]  */
    public $Groups = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.ExperimentInfo');

      // OPTIONAL STRING Name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 Visit = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "Visit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE Hits = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "Hits";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\iface\ExperimentInfo\HitsEntry';
      $descriptor->addField($f);

      // REPEATED MESSAGE Groups = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "Groups";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\iface\TestGroup';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Name> value
     *
     * @return \iface\ExperimentInfo
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <Name> value
     *
     * @param string $value
     * @return \iface\ExperimentInfo
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <Visit> has a value
     *
     * @return boolean
     */
    public function hasVisit(){
      return $this->_has(2);
    }
    
    /**
     * Clear <Visit> value
     *
     * @return \iface\ExperimentInfo
     */
    public function clearVisit(){
      return $this->_clear(2);
    }
    
    /**
     * Get <Visit> value
     *
     * @return int
     */
    public function getVisit(){
      return $this->_get(2);
    }
    
    /**
     * Set <Visit> value
     *
     * @param int $value
     * @return \iface\ExperimentInfo
     */
    public function setVisit( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <Hits> has a value
     *
     * @return boolean
     */
    public function hasHits(){
      return $this->_has(3);
    }
    
    /**
     * Clear <Hits> value
     *
     * @return \iface\ExperimentInfo
     */
    public function clearHits(){
      return $this->_clear(3);
    }
    
    /**
     * Get <Hits> value
     *
     * @param int $idx
     * @return \iface\ExperimentInfo\HitsEntry
     */
    public function getHits($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <Hits> value
     *
     * @param \iface\ExperimentInfo\HitsEntry $value
     * @return \iface\ExperimentInfo
     */
    public function setHits(\iface\ExperimentInfo\HitsEntry $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <Hits>
     *
     * @return \iface\ExperimentInfo\HitsEntry[]
     */
    public function getHitsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <Hits>
     *
     * @param \iface\ExperimentInfo\HitsEntry $value
     * @return \iface\ExperimentInfo
     */
    public function addHits(\iface\ExperimentInfo\HitsEntry $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <Groups> has a value
     *
     * @return boolean
     */
    public function hasGroups(){
      return $this->_has(4);
    }
    
    /**
     * Clear <Groups> value
     *
     * @return \iface\ExperimentInfo
     */
    public function clearGroups(){
      return $this->_clear(4);
    }
    
    /**
     * Get <Groups> value
     *
     * @param int $idx
     * @return \iface\TestGroup
     */
    public function getGroups($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <Groups> value
     *
     * @param \iface\TestGroup $value
     * @return \iface\ExperimentInfo
     */
    public function setGroups(\iface\TestGroup $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <Groups>
     *
     * @return \iface\TestGroup[]
     */
    public function getGroupsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <Groups>
     *
     * @param \iface\TestGroup $value
     * @return \iface\ExperimentInfo
     */
    public function addGroups(\iface\TestGroup $value){
     return $this->_add(4, $value);
    }
  }
}

namespace iface\ProductInfo {

  class ExperimentInfosEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \iface\ExperimentInfo */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.ProductInfo.ExperimentInfosEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\iface\ExperimentInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \iface\ProductInfo\ExperimentInfosEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \iface\ProductInfo\ExperimentInfosEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \iface\ProductInfo\ExperimentInfosEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \iface\ExperimentInfo
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \iface\ExperimentInfo $value
     * @return \iface\ProductInfo\ExperimentInfosEntry
     */
    public function setValue(\iface\ExperimentInfo $value){
      return $this->_set(2, $value);
    }
  }
}

namespace iface {

  class ProductInfo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $Product = null;
    
    /**  @var \iface\ProductInfo\ExperimentInfosEntry[]  */
    public $ExperimentInfos = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.ProductInfo');

      // OPTIONAL STRING Product = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Product";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE ExperimentInfos = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "ExperimentInfos";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\iface\ProductInfo\ExperimentInfosEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Product> has a value
     *
     * @return boolean
     */
    public function hasProduct(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Product> value
     *
     * @return \iface\ProductInfo
     */
    public function clearProduct(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Product> value
     *
     * @return string
     */
    public function getProduct(){
      return $this->_get(1);
    }
    
    /**
     * Set <Product> value
     *
     * @param string $value
     * @return \iface\ProductInfo
     */
    public function setProduct( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <ExperimentInfos> has a value
     *
     * @return boolean
     */
    public function hasExperimentInfos(){
      return $this->_has(2);
    }
    
    /**
     * Clear <ExperimentInfos> value
     *
     * @return \iface\ProductInfo
     */
    public function clearExperimentInfos(){
      return $this->_clear(2);
    }
    
    /**
     * Get <ExperimentInfos> value
     *
     * @param int $idx
     * @return \iface\ProductInfo\ExperimentInfosEntry
     */
    public function getExperimentInfos($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <ExperimentInfos> value
     *
     * @param \iface\ProductInfo\ExperimentInfosEntry $value
     * @return \iface\ProductInfo
     */
    public function setExperimentInfos(\iface\ProductInfo\ExperimentInfosEntry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <ExperimentInfos>
     *
     * @return \iface\ProductInfo\ExperimentInfosEntry[]
     */
    public function getExperimentInfosList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <ExperimentInfos>
     *
     * @param \iface\ProductInfo\ExperimentInfosEntry $value
     * @return \iface\ProductInfo
     */
    public function addExperimentInfos(\iface\ProductInfo\ExperimentInfosEntry $value){
     return $this->_add(2, $value);
    }
  }
}

namespace iface\InfoStat {

  class ProductInfosEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \iface\ProductInfo */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.InfoStat.ProductInfosEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\iface\ProductInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \iface\InfoStat\ProductInfosEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \iface\InfoStat\ProductInfosEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \iface\InfoStat\ProductInfosEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \iface\ProductInfo
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \iface\ProductInfo $value
     * @return \iface\InfoStat\ProductInfosEntry
     */
    public function setValue(\iface\ProductInfo $value){
      return $this->_set(2, $value);
    }
  }
}

namespace iface {

  class InfoStat extends \DrSlump\Protobuf\Message {

    /**  @var \iface\InfoStat\ProductInfosEntry[]  */
    public $ProductInfos = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.InfoStat');

      // REPEATED MESSAGE ProductInfos = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ProductInfos";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\iface\InfoStat\ProductInfosEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ProductInfos> has a value
     *
     * @return boolean
     */
    public function hasProductInfos(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ProductInfos> value
     *
     * @return \iface\InfoStat
     */
    public function clearProductInfos(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ProductInfos> value
     *
     * @param int $idx
     * @return \iface\InfoStat\ProductInfosEntry
     */
    public function getProductInfos($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <ProductInfos> value
     *
     * @param \iface\InfoStat\ProductInfosEntry $value
     * @return \iface\InfoStat
     */
    public function setProductInfos(\iface\InfoStat\ProductInfosEntry $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <ProductInfos>
     *
     * @return \iface\InfoStat\ProductInfosEntry[]
     */
    public function getProductInfosList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <ProductInfos>
     *
     * @param \iface\InfoStat\ProductInfosEntry $value
     * @return \iface\InfoStat
     */
    public function addProductInfos(\iface\InfoStat\ProductInfosEntry $value){
     return $this->_add(1, $value);
    }
  }
}

namespace iface\ExperimentMap {

  class ExperimentsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \iface\Experiment */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.ExperimentMap.ExperimentsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\iface\Experiment';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \iface\ExperimentMap\ExperimentsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \iface\ExperimentMap\ExperimentsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \iface\ExperimentMap\ExperimentsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \iface\Experiment
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \iface\Experiment $value
     * @return \iface\ExperimentMap\ExperimentsEntry
     */
    public function setValue(\iface\Experiment $value){
      return $this->_set(2, $value);
    }
  }
}

namespace iface {

  class ExperimentMap extends \DrSlump\Protobuf\Message {

    /**  @var \iface\ExperimentMap\ExperimentsEntry[]  */
    public $Experiments = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.ExperimentMap');

      // REPEATED MESSAGE Experiments = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Experiments";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\iface\ExperimentMap\ExperimentsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Experiments> has a value
     *
     * @return boolean
     */
    public function hasExperiments(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Experiments> value
     *
     * @return \iface\ExperimentMap
     */
    public function clearExperiments(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Experiments> value
     *
     * @param int $idx
     * @return \iface\ExperimentMap\ExperimentsEntry
     */
    public function getExperiments($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <Experiments> value
     *
     * @param \iface\ExperimentMap\ExperimentsEntry $value
     * @return \iface\ExperimentMap
     */
    public function setExperiments(\iface\ExperimentMap\ExperimentsEntry $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <Experiments>
     *
     * @return \iface\ExperimentMap\ExperimentsEntry[]
     */
    public function getExperimentsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <Experiments>
     *
     * @param \iface\ExperimentMap\ExperimentsEntry $value
     * @return \iface\ExperimentMap
     */
    public function addExperiments(\iface\ExperimentMap\ExperimentsEntry $value){
     return $this->_add(1, $value);
    }
  }
}

namespace iface\ProductExperimentSuite {

  class SuitesEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \iface\ExperimentMap */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.ProductExperimentSuite.SuitesEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\iface\ExperimentMap';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \iface\ProductExperimentSuite\SuitesEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \iface\ProductExperimentSuite\SuitesEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \iface\ProductExperimentSuite\SuitesEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \iface\ExperimentMap
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \iface\ExperimentMap $value
     * @return \iface\ProductExperimentSuite\SuitesEntry
     */
    public function setValue(\iface\ExperimentMap $value){
      return $this->_set(2, $value);
    }
  }
}

namespace iface {

  class ProductExperimentSuite extends \DrSlump\Protobuf\Message {

    /**  @var \iface\ProductExperimentSuite\SuitesEntry[]  */
    public $Suites = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.ProductExperimentSuite');

      // REPEATED MESSAGE Suites = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Suites";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\iface\ProductExperimentSuite\SuitesEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Suites> has a value
     *
     * @return boolean
     */
    public function hasSuites(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Suites> value
     *
     * @return \iface\ProductExperimentSuite
     */
    public function clearSuites(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Suites> value
     *
     * @param int $idx
     * @return \iface\ProductExperimentSuite\SuitesEntry
     */
    public function getSuites($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <Suites> value
     *
     * @param \iface\ProductExperimentSuite\SuitesEntry $value
     * @return \iface\ProductExperimentSuite
     */
    public function setSuites(\iface\ProductExperimentSuite\SuitesEntry $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <Suites>
     *
     * @return \iface\ProductExperimentSuite\SuitesEntry[]
     */
    public function getSuitesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <Suites>
     *
     * @param \iface\ProductExperimentSuite\SuitesEntry $value
     * @return \iface\ProductExperimentSuite
     */
    public function addSuites(\iface\ProductExperimentSuite\SuitesEntry $value){
     return $this->_add(1, $value);
    }
  }
}

namespace iface {

  class AbtestServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param iface\CreateExperimentRequest $input
     */
    public function CreateExperiment(\iface\CreateExperimentRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/iface.AbtestService/CreateExperiment', $argument, '\iface\CreateExperimentResponse::deserialize', $metadata, $options);
    }
    /**
     * @param iface\AdjustExperimentRequest $input
     */
    public function AdjustExperiment(\iface\AdjustExperimentRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/iface.AbtestService/AdjustExperiment', $argument, '\iface\AdjustExperimentResponse::deserialize', $metadata, $options);
    }
    /**
     * @param iface\InfoRequest $input
     */
    public function Info(\iface\InfoRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/iface.AbtestService/Info', $argument, '\iface\InfoStat::deserialize', $metadata, $options);
    }
    /**
     * @param iface\GetExperimentGroupRequest $input
     */
    public function GetExperimentGroup(\iface\GetExperimentGroupRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/iface.AbtestService/GetExperimentGroup', $argument, '\iface\GetExperimentGroupResponse::deserialize', $metadata, $options);
    }
  }
}
