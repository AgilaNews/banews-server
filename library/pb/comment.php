<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: comment.proto

namespace iface {

  class NewCommentRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $Product = null;
    
    /**  @var string */
    public $UserId = null;
    
    /**  @var string */
    public $DocId = null;
    
    /**  @var string */
    public $CommentDetail = null;
    
    /**  @var string */
    public $UserName = null;
    
    /**  @var int */
    public $RefCommentId = null;
    
    /**  @var string */
    public $DeviceId = null;
    
    /**  @var boolean */
    public $IsAnonymous = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.NewCommentRequest');

      // OPTIONAL STRING Product = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Product";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING UserId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "UserId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING DocId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "DocId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING CommentDetail = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "CommentDetail";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING UserName = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "UserName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 RefCommentId = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "RefCommentId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING DeviceId = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "DeviceId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL IsAnonymous = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "IsAnonymous";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Product> has a value
     *
     * @return boolean
     */
    public function hasProduct(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Product> value
     *
     * @return \iface\NewCommentRequest
     */
    public function clearProduct(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Product> value
     *
     * @return string
     */
    public function getProduct(){
      return $this->_get(1);
    }
    
    /**
     * Set <Product> value
     *
     * @param string $value
     * @return \iface\NewCommentRequest
     */
    public function setProduct( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <UserId> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <UserId> value
     *
     * @return \iface\NewCommentRequest
     */
    public function clearUserId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <UserId> value
     *
     * @return string
     */
    public function getUserId(){
      return $this->_get(2);
    }
    
    /**
     * Set <UserId> value
     *
     * @param string $value
     * @return \iface\NewCommentRequest
     */
    public function setUserId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <DocId> has a value
     *
     * @return boolean
     */
    public function hasDocId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <DocId> value
     *
     * @return \iface\NewCommentRequest
     */
    public function clearDocId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <DocId> value
     *
     * @return string
     */
    public function getDocId(){
      return $this->_get(3);
    }
    
    /**
     * Set <DocId> value
     *
     * @param string $value
     * @return \iface\NewCommentRequest
     */
    public function setDocId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <CommentDetail> has a value
     *
     * @return boolean
     */
    public function hasCommentDetail(){
      return $this->_has(4);
    }
    
    /**
     * Clear <CommentDetail> value
     *
     * @return \iface\NewCommentRequest
     */
    public function clearCommentDetail(){
      return $this->_clear(4);
    }
    
    /**
     * Get <CommentDetail> value
     *
     * @return string
     */
    public function getCommentDetail(){
      return $this->_get(4);
    }
    
    /**
     * Set <CommentDetail> value
     *
     * @param string $value
     * @return \iface\NewCommentRequest
     */
    public function setCommentDetail( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <UserName> has a value
     *
     * @return boolean
     */
    public function hasUserName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <UserName> value
     *
     * @return \iface\NewCommentRequest
     */
    public function clearUserName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <UserName> value
     *
     * @return string
     */
    public function getUserName(){
      return $this->_get(5);
    }
    
    /**
     * Set <UserName> value
     *
     * @param string $value
     * @return \iface\NewCommentRequest
     */
    public function setUserName( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <RefCommentId> has a value
     *
     * @return boolean
     */
    public function hasRefCommentId(){
      return $this->_has(10);
    }
    
    /**
     * Clear <RefCommentId> value
     *
     * @return \iface\NewCommentRequest
     */
    public function clearRefCommentId(){
      return $this->_clear(10);
    }
    
    /**
     * Get <RefCommentId> value
     *
     * @return int
     */
    public function getRefCommentId(){
      return $this->_get(10);
    }
    
    /**
     * Set <RefCommentId> value
     *
     * @param int $value
     * @return \iface\NewCommentRequest
     */
    public function setRefCommentId( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <DeviceId> has a value
     *
     * @return boolean
     */
    public function hasDeviceId(){
      return $this->_has(11);
    }
    
    /**
     * Clear <DeviceId> value
     *
     * @return \iface\NewCommentRequest
     */
    public function clearDeviceId(){
      return $this->_clear(11);
    }
    
    /**
     * Get <DeviceId> value
     *
     * @return string
     */
    public function getDeviceId(){
      return $this->_get(11);
    }
    
    /**
     * Set <DeviceId> value
     *
     * @param string $value
     * @return \iface\NewCommentRequest
     */
    public function setDeviceId( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <IsAnonymous> has a value
     *
     * @return boolean
     */
    public function hasIsAnonymous(){
      return $this->_has(12);
    }
    
    /**
     * Clear <IsAnonymous> value
     *
     * @return \iface\NewCommentRequest
     */
    public function clearIsAnonymous(){
      return $this->_clear(12);
    }
    
    /**
     * Get <IsAnonymous> value
     *
     * @return boolean
     */
    public function getIsAnonymous(){
      return $this->_get(12);
    }
    
    /**
     * Set <IsAnonymous> value
     *
     * @param boolean $value
     * @return \iface\NewCommentRequest
     */
    public function setIsAnonymous( $value){
      return $this->_set(12, $value);
    }
  }
}

namespace iface {

  class NewCommentResponse extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $CommentId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.NewCommentResponse');

      // OPTIONAL UINT64 CommentId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "CommentId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <CommentId> has a value
     *
     * @return boolean
     */
    public function hasCommentId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <CommentId> value
     *
     * @return \iface\NewCommentResponse
     */
    public function clearCommentId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <CommentId> value
     *
     * @return int
     */
    public function getCommentId(){
      return $this->_get(2);
    }
    
    /**
     * Set <CommentId> value
     *
     * @param int $value
     * @return \iface\NewCommentResponse
     */
    public function setCommentId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace iface {

  class SingleComment extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $CommentId = null;
    
    /**  @var string */
    public $UserId = null;
    
    /**  @var string */
    public $DocId = null;
    
    /**  @var string */
    public $CommentDetail = null;
    
    /**  @var int */
    public $Liked = null;
    
    /**  @var int */
    public $Unliked = null;
    
    /**  @var int */
    public $Timestamp = null;
    
    /**  @var boolean */
    public $LogicDeleted = null;
    
    /**  @var boolean */
    public $IsAnonymous = null;
    
    /**  @var \iface\SingleComment */
    public $RefComment = null;
    
    /**  @var string */
    public $DeviceId = null;
    
    /**  @var boolean */
    public $DeviceLiked = null;
    
    /**  @var string */
    public $UserName = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.SingleComment');

      // OPTIONAL UINT64 CommentId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "CommentId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING UserId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "UserId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING DocId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "DocId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING CommentDetail = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "CommentDetail";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 Liked = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "Liked";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 Unliked = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "Unliked";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 Timestamp = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "Timestamp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL LogicDeleted = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "LogicDeleted";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL IsAnonymous = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "IsAnonymous";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE RefComment = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "RefComment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\iface\SingleComment';
      $descriptor->addField($f);

      // OPTIONAL STRING DeviceId = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "DeviceId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL DeviceLiked = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "DeviceLiked";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING UserName = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "UserName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <CommentId> has a value
     *
     * @return boolean
     */
    public function hasCommentId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <CommentId> value
     *
     * @return \iface\SingleComment
     */
    public function clearCommentId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <CommentId> value
     *
     * @return int
     */
    public function getCommentId(){
      return $this->_get(1);
    }
    
    /**
     * Set <CommentId> value
     *
     * @param int $value
     * @return \iface\SingleComment
     */
    public function setCommentId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <UserId> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <UserId> value
     *
     * @return \iface\SingleComment
     */
    public function clearUserId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <UserId> value
     *
     * @return string
     */
    public function getUserId(){
      return $this->_get(2);
    }
    
    /**
     * Set <UserId> value
     *
     * @param string $value
     * @return \iface\SingleComment
     */
    public function setUserId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <DocId> has a value
     *
     * @return boolean
     */
    public function hasDocId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <DocId> value
     *
     * @return \iface\SingleComment
     */
    public function clearDocId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <DocId> value
     *
     * @return string
     */
    public function getDocId(){
      return $this->_get(3);
    }
    
    /**
     * Set <DocId> value
     *
     * @param string $value
     * @return \iface\SingleComment
     */
    public function setDocId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <CommentDetail> has a value
     *
     * @return boolean
     */
    public function hasCommentDetail(){
      return $this->_has(4);
    }
    
    /**
     * Clear <CommentDetail> value
     *
     * @return \iface\SingleComment
     */
    public function clearCommentDetail(){
      return $this->_clear(4);
    }
    
    /**
     * Get <CommentDetail> value
     *
     * @return string
     */
    public function getCommentDetail(){
      return $this->_get(4);
    }
    
    /**
     * Set <CommentDetail> value
     *
     * @param string $value
     * @return \iface\SingleComment
     */
    public function setCommentDetail( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <Liked> has a value
     *
     * @return boolean
     */
    public function hasLiked(){
      return $this->_has(5);
    }
    
    /**
     * Clear <Liked> value
     *
     * @return \iface\SingleComment
     */
    public function clearLiked(){
      return $this->_clear(5);
    }
    
    /**
     * Get <Liked> value
     *
     * @return int
     */
    public function getLiked(){
      return $this->_get(5);
    }
    
    /**
     * Set <Liked> value
     *
     * @param int $value
     * @return \iface\SingleComment
     */
    public function setLiked( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <Unliked> has a value
     *
     * @return boolean
     */
    public function hasUnliked(){
      return $this->_has(6);
    }
    
    /**
     * Clear <Unliked> value
     *
     * @return \iface\SingleComment
     */
    public function clearUnliked(){
      return $this->_clear(6);
    }
    
    /**
     * Get <Unliked> value
     *
     * @return int
     */
    public function getUnliked(){
      return $this->_get(6);
    }
    
    /**
     * Set <Unliked> value
     *
     * @param int $value
     * @return \iface\SingleComment
     */
    public function setUnliked( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <Timestamp> has a value
     *
     * @return boolean
     */
    public function hasTimestamp(){
      return $this->_has(7);
    }
    
    /**
     * Clear <Timestamp> value
     *
     * @return \iface\SingleComment
     */
    public function clearTimestamp(){
      return $this->_clear(7);
    }
    
    /**
     * Get <Timestamp> value
     *
     * @return int
     */
    public function getTimestamp(){
      return $this->_get(7);
    }
    
    /**
     * Set <Timestamp> value
     *
     * @param int $value
     * @return \iface\SingleComment
     */
    public function setTimestamp( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <LogicDeleted> has a value
     *
     * @return boolean
     */
    public function hasLogicDeleted(){
      return $this->_has(9);
    }
    
    /**
     * Clear <LogicDeleted> value
     *
     * @return \iface\SingleComment
     */
    public function clearLogicDeleted(){
      return $this->_clear(9);
    }
    
    /**
     * Get <LogicDeleted> value
     *
     * @return boolean
     */
    public function getLogicDeleted(){
      return $this->_get(9);
    }
    
    /**
     * Set <LogicDeleted> value
     *
     * @param boolean $value
     * @return \iface\SingleComment
     */
    public function setLogicDeleted( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <IsAnonymous> has a value
     *
     * @return boolean
     */
    public function hasIsAnonymous(){
      return $this->_has(10);
    }
    
    /**
     * Clear <IsAnonymous> value
     *
     * @return \iface\SingleComment
     */
    public function clearIsAnonymous(){
      return $this->_clear(10);
    }
    
    /**
     * Get <IsAnonymous> value
     *
     * @return boolean
     */
    public function getIsAnonymous(){
      return $this->_get(10);
    }
    
    /**
     * Set <IsAnonymous> value
     *
     * @param boolean $value
     * @return \iface\SingleComment
     */
    public function setIsAnonymous( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <RefComment> has a value
     *
     * @return boolean
     */
    public function hasRefComment(){
      return $this->_has(11);
    }
    
    /**
     * Clear <RefComment> value
     *
     * @return \iface\SingleComment
     */
    public function clearRefComment(){
      return $this->_clear(11);
    }
    
    /**
     * Get <RefComment> value
     *
     * @return \iface\SingleComment
     */
    public function getRefComment(){
      return $this->_get(11);
    }
    
    /**
     * Set <RefComment> value
     *
     * @param \iface\SingleComment $value
     * @return \iface\SingleComment
     */
    public function setRefComment(\iface\SingleComment $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <DeviceId> has a value
     *
     * @return boolean
     */
    public function hasDeviceId(){
      return $this->_has(12);
    }
    
    /**
     * Clear <DeviceId> value
     *
     * @return \iface\SingleComment
     */
    public function clearDeviceId(){
      return $this->_clear(12);
    }
    
    /**
     * Get <DeviceId> value
     *
     * @return string
     */
    public function getDeviceId(){
      return $this->_get(12);
    }
    
    /**
     * Set <DeviceId> value
     *
     * @param string $value
     * @return \iface\SingleComment
     */
    public function setDeviceId( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <DeviceLiked> has a value
     *
     * @return boolean
     */
    public function hasDeviceLiked(){
      return $this->_has(13);
    }
    
    /**
     * Clear <DeviceLiked> value
     *
     * @return \iface\SingleComment
     */
    public function clearDeviceLiked(){
      return $this->_clear(13);
    }
    
    /**
     * Get <DeviceLiked> value
     *
     * @return boolean
     */
    public function getDeviceLiked(){
      return $this->_get(13);
    }
    
    /**
     * Set <DeviceLiked> value
     *
     * @param boolean $value
     * @return \iface\SingleComment
     */
    public function setDeviceLiked( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <UserName> has a value
     *
     * @return boolean
     */
    public function hasUserName(){
      return $this->_has(14);
    }
    
    /**
     * Clear <UserName> value
     *
     * @return \iface\SingleComment
     */
    public function clearUserName(){
      return $this->_clear(14);
    }
    
    /**
     * Get <UserName> value
     *
     * @return string
     */
    public function getUserName(){
      return $this->_get(14);
    }
    
    /**
     * Set <UserName> value
     *
     * @param string $value
     * @return \iface\SingleComment
     */
    public function setUserName( $value){
      return $this->_set(14, $value);
    }
  }
}

namespace iface\GetCommentsOfDocRequest {

  class OrderField extends \DrSlump\Protobuf\Enum {
    const LIKED = 0;
    const UNLIKED = 1;
    const TIME = 2;
  }
}
namespace iface {

  class GetCommentsOfDocRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $Product = null;
    
    /**  @var string */
    public $DeviceId = null;
    
    /**  @var string */
    public $UserId = null;
    
    /**  @var string */
    public $DocId = null;
    
    /**  @var int */
    public $LastId = null;
    
    /**  @var int */
    public $Length = null;
    
    /**  @var int - \iface\GetCommentsOfDocRequest\OrderField */
    public $Order = null;
    
    /**  @var int */
    public $Threshold = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.GetCommentsOfDocRequest');

      // OPTIONAL STRING Product = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Product";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING DeviceId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "DeviceId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING UserId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "UserId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING DocId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "DocId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 LastId = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "LastId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 Length = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "Length";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM Order = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "Order";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\iface\GetCommentsOfDocRequest\OrderField';
      $descriptor->addField($f);

      // OPTIONAL UINT32 Threshold = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "Threshold";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Product> has a value
     *
     * @return boolean
     */
    public function hasProduct(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Product> value
     *
     * @return \iface\GetCommentsOfDocRequest
     */
    public function clearProduct(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Product> value
     *
     * @return string
     */
    public function getProduct(){
      return $this->_get(1);
    }
    
    /**
     * Set <Product> value
     *
     * @param string $value
     * @return \iface\GetCommentsOfDocRequest
     */
    public function setProduct( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <DeviceId> has a value
     *
     * @return boolean
     */
    public function hasDeviceId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <DeviceId> value
     *
     * @return \iface\GetCommentsOfDocRequest
     */
    public function clearDeviceId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <DeviceId> value
     *
     * @return string
     */
    public function getDeviceId(){
      return $this->_get(2);
    }
    
    /**
     * Set <DeviceId> value
     *
     * @param string $value
     * @return \iface\GetCommentsOfDocRequest
     */
    public function setDeviceId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <UserId> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <UserId> value
     *
     * @return \iface\GetCommentsOfDocRequest
     */
    public function clearUserId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <UserId> value
     *
     * @return string
     */
    public function getUserId(){
      return $this->_get(3);
    }
    
    /**
     * Set <UserId> value
     *
     * @param string $value
     * @return \iface\GetCommentsOfDocRequest
     */
    public function setUserId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <DocId> has a value
     *
     * @return boolean
     */
    public function hasDocId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <DocId> value
     *
     * @return \iface\GetCommentsOfDocRequest
     */
    public function clearDocId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <DocId> value
     *
     * @return string
     */
    public function getDocId(){
      return $this->_get(4);
    }
    
    /**
     * Set <DocId> value
     *
     * @param string $value
     * @return \iface\GetCommentsOfDocRequest
     */
    public function setDocId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <LastId> has a value
     *
     * @return boolean
     */
    public function hasLastId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <LastId> value
     *
     * @return \iface\GetCommentsOfDocRequest
     */
    public function clearLastId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <LastId> value
     *
     * @return int
     */
    public function getLastId(){
      return $this->_get(5);
    }
    
    /**
     * Set <LastId> value
     *
     * @param int $value
     * @return \iface\GetCommentsOfDocRequest
     */
    public function setLastId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <Length> has a value
     *
     * @return boolean
     */
    public function hasLength(){
      return $this->_has(6);
    }
    
    /**
     * Clear <Length> value
     *
     * @return \iface\GetCommentsOfDocRequest
     */
    public function clearLength(){
      return $this->_clear(6);
    }
    
    /**
     * Get <Length> value
     *
     * @return int
     */
    public function getLength(){
      return $this->_get(6);
    }
    
    /**
     * Set <Length> value
     *
     * @param int $value
     * @return \iface\GetCommentsOfDocRequest
     */
    public function setLength( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <Order> has a value
     *
     * @return boolean
     */
    public function hasOrder(){
      return $this->_has(7);
    }
    
    /**
     * Clear <Order> value
     *
     * @return \iface\GetCommentsOfDocRequest
     */
    public function clearOrder(){
      return $this->_clear(7);
    }
    
    /**
     * Get <Order> value
     *
     * @return int - \iface\GetCommentsOfDocRequest\OrderField
     */
    public function getOrder(){
      return $this->_get(7);
    }
    
    /**
     * Set <Order> value
     *
     * @param int - \iface\GetCommentsOfDocRequest\OrderField $value
     * @return \iface\GetCommentsOfDocRequest
     */
    public function setOrder( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <Threshold> has a value
     *
     * @return boolean
     */
    public function hasThreshold(){
      return $this->_has(8);
    }
    
    /**
     * Clear <Threshold> value
     *
     * @return \iface\GetCommentsOfDocRequest
     */
    public function clearThreshold(){
      return $this->_clear(8);
    }
    
    /**
     * Get <Threshold> value
     *
     * @return int
     */
    public function getThreshold(){
      return $this->_get(8);
    }
    
    /**
     * Set <Threshold> value
     *
     * @param int $value
     * @return \iface\GetCommentsOfDocRequest
     */
    public function setThreshold( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace iface {

  class GetCommentsCountRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $Product = null;
    
    /**  @var string[]  */
    public $DocIds = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.GetCommentsCountRequest');

      // OPTIONAL STRING Product = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Product";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING DocIds = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "DocIds";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Product> has a value
     *
     * @return boolean
     */
    public function hasProduct(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Product> value
     *
     * @return \iface\GetCommentsCountRequest
     */
    public function clearProduct(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Product> value
     *
     * @return string
     */
    public function getProduct(){
      return $this->_get(1);
    }
    
    /**
     * Set <Product> value
     *
     * @param string $value
     * @return \iface\GetCommentsCountRequest
     */
    public function setProduct( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <DocIds> has a value
     *
     * @return boolean
     */
    public function hasDocIds(){
      return $this->_has(2);
    }
    
    /**
     * Clear <DocIds> value
     *
     * @return \iface\GetCommentsCountRequest
     */
    public function clearDocIds(){
      return $this->_clear(2);
    }
    
    /**
     * Get <DocIds> value
     *
     * @param int $idx
     * @return string
     */
    public function getDocIds($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <DocIds> value
     *
     * @param string $value
     * @return \iface\GetCommentsCountRequest
     */
    public function setDocIds( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <DocIds>
     *
     * @return string[]
     */
    public function getDocIdsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <DocIds>
     *
     * @param string $value
     * @return \iface\GetCommentsCountRequest
     */
    public function addDocIds( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace iface {

  class GetCommentsCountResponse extends \DrSlump\Protobuf\Message {

    /**  @var int[]  */
    public $CommentsCount = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.GetCommentsCountResponse');

      // REPEATED UINT32 CommentsCount = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "CommentsCount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <CommentsCount> has a value
     *
     * @return boolean
     */
    public function hasCommentsCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <CommentsCount> value
     *
     * @return \iface\GetCommentsCountResponse
     */
    public function clearCommentsCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <CommentsCount> value
     *
     * @param int $idx
     * @return int
     */
    public function getCommentsCount($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <CommentsCount> value
     *
     * @param int $value
     * @return \iface\GetCommentsCountResponse
     */
    public function setCommentsCount( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <CommentsCount>
     *
     * @return int[]
     */
    public function getCommentsCountList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <CommentsCount>
     *
     * @param int $value
     * @return \iface\GetCommentsCountResponse
     */
    public function addCommentsCount( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace iface {

  class LikeCommentRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $Product = null;
    
    /**  @var int */
    public $CommentId = null;
    
    /**  @var string */
    public $UserId = null;
    
    /**  @var string */
    public $DeviceId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.LikeCommentRequest');

      // OPTIONAL STRING Product = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Product";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 CommentId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "CommentId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING UserId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "UserId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING DeviceId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "DeviceId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Product> has a value
     *
     * @return boolean
     */
    public function hasProduct(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Product> value
     *
     * @return \iface\LikeCommentRequest
     */
    public function clearProduct(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Product> value
     *
     * @return string
     */
    public function getProduct(){
      return $this->_get(1);
    }
    
    /**
     * Set <Product> value
     *
     * @param string $value
     * @return \iface\LikeCommentRequest
     */
    public function setProduct( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <CommentId> has a value
     *
     * @return boolean
     */
    public function hasCommentId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <CommentId> value
     *
     * @return \iface\LikeCommentRequest
     */
    public function clearCommentId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <CommentId> value
     *
     * @return int
     */
    public function getCommentId(){
      return $this->_get(2);
    }
    
    /**
     * Set <CommentId> value
     *
     * @param int $value
     * @return \iface\LikeCommentRequest
     */
    public function setCommentId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <UserId> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <UserId> value
     *
     * @return \iface\LikeCommentRequest
     */
    public function clearUserId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <UserId> value
     *
     * @return string
     */
    public function getUserId(){
      return $this->_get(3);
    }
    
    /**
     * Set <UserId> value
     *
     * @param string $value
     * @return \iface\LikeCommentRequest
     */
    public function setUserId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <DeviceId> has a value
     *
     * @return boolean
     */
    public function hasDeviceId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <DeviceId> value
     *
     * @return \iface\LikeCommentRequest
     */
    public function clearDeviceId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <DeviceId> value
     *
     * @return string
     */
    public function getDeviceId(){
      return $this->_get(4);
    }
    
    /**
     * Set <DeviceId> value
     *
     * @param string $value
     * @return \iface\LikeCommentRequest
     */
    public function setDeviceId( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace iface {

  class LikeCommentResponse extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $CurrentLiked = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.LikeCommentResponse');

      // OPTIONAL UINT32 CurrentLiked = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "CurrentLiked";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <CurrentLiked> has a value
     *
     * @return boolean
     */
    public function hasCurrentLiked(){
      return $this->_has(2);
    }
    
    /**
     * Clear <CurrentLiked> value
     *
     * @return \iface\LikeCommentResponse
     */
    public function clearCurrentLiked(){
      return $this->_clear(2);
    }
    
    /**
     * Get <CurrentLiked> value
     *
     * @return int
     */
    public function getCurrentLiked(){
      return $this->_get(2);
    }
    
    /**
     * Set <CurrentLiked> value
     *
     * @param int $value
     * @return \iface\LikeCommentResponse
     */
    public function setCurrentLiked( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace iface {

  class GetCommentOfDocResponse extends \DrSlump\Protobuf\Message {

    /**  @var \iface\SingleComment[]  */
    public $Comments = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.GetCommentOfDocResponse');

      // REPEATED MESSAGE Comments = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "Comments";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\iface\SingleComment';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Comments> has a value
     *
     * @return boolean
     */
    public function hasComments(){
      return $this->_has(2);
    }
    
    /**
     * Clear <Comments> value
     *
     * @return \iface\GetCommentOfDocResponse
     */
    public function clearComments(){
      return $this->_clear(2);
    }
    
    /**
     * Get <Comments> value
     *
     * @param int $idx
     * @return \iface\SingleComment
     */
    public function getComments($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <Comments> value
     *
     * @param \iface\SingleComment $value
     * @return \iface\GetCommentOfDocResponse
     */
    public function setComments(\iface\SingleComment $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <Comments>
     *
     * @return \iface\SingleComment[]
     */
    public function getCommentsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <Comments>
     *
     * @param \iface\SingleComment $value
     * @return \iface\GetCommentOfDocResponse
     */
    public function addComments(\iface\SingleComment $value){
     return $this->_add(2, $value);
    }
  }
}

namespace iface {

  class DelCommentRequest extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $CommentId = null;
    
    /**  @var boolean */
    public $IsLogicalDel = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.DelCommentRequest');

      // OPTIONAL UINT64 CommentId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "CommentId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL IsLogicalDel = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "IsLogicalDel";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <CommentId> has a value
     *
     * @return boolean
     */
    public function hasCommentId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <CommentId> value
     *
     * @return \iface\DelCommentRequest
     */
    public function clearCommentId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <CommentId> value
     *
     * @return int
     */
    public function getCommentId(){
      return $this->_get(1);
    }
    
    /**
     * Set <CommentId> value
     *
     * @param int $value
     * @return \iface\DelCommentRequest
     */
    public function setCommentId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <IsLogicalDel> has a value
     *
     * @return boolean
     */
    public function hasIsLogicalDel(){
      return $this->_has(2);
    }
    
    /**
     * Clear <IsLogicalDel> value
     *
     * @return \iface\DelCommentRequest
     */
    public function clearIsLogicalDel(){
      return $this->_clear(2);
    }
    
    /**
     * Get <IsLogicalDel> value
     *
     * @return boolean
     */
    public function getIsLogicalDel(){
      return $this->_get(2);
    }
    
    /**
     * Set <IsLogicalDel> value
     *
     * @param boolean $value
     * @return \iface\DelCommentRequest
     */
    public function setIsLogicalDel( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace iface {

  class BatchGetCommentsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $DeviceId = null;
    
    /**  @var int[]  */
    public $Ids = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.BatchGetCommentsRequest');

      // OPTIONAL STRING DeviceId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "DeviceId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED UINT64 Ids = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "Ids";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <DeviceId> has a value
     *
     * @return boolean
     */
    public function hasDeviceId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <DeviceId> value
     *
     * @return \iface\BatchGetCommentsRequest
     */
    public function clearDeviceId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <DeviceId> value
     *
     * @return string
     */
    public function getDeviceId(){
      return $this->_get(1);
    }
    
    /**
     * Set <DeviceId> value
     *
     * @param string $value
     * @return \iface\BatchGetCommentsRequest
     */
    public function setDeviceId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <Ids> has a value
     *
     * @return boolean
     */
    public function hasIds(){
      return $this->_has(2);
    }
    
    /**
     * Clear <Ids> value
     *
     * @return \iface\BatchGetCommentsRequest
     */
    public function clearIds(){
      return $this->_clear(2);
    }
    
    /**
     * Get <Ids> value
     *
     * @param int $idx
     * @return int
     */
    public function getIds($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <Ids> value
     *
     * @param int $value
     * @return \iface\BatchGetCommentsRequest
     */
    public function setIds( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <Ids>
     *
     * @return int[]
     */
    public function getIdsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <Ids>
     *
     * @param int $value
     * @return \iface\BatchGetCommentsRequest
     */
    public function addIds( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace iface {

  class BatchGetCommentsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \iface\SingleComment[]  */
    public $Comments = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.BatchGetCommentsResponse');

      // REPEATED MESSAGE Comments = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "Comments";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\iface\SingleComment';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Comments> has a value
     *
     * @return boolean
     */
    public function hasComments(){
      return $this->_has(2);
    }
    
    /**
     * Clear <Comments> value
     *
     * @return \iface\BatchGetCommentsResponse
     */
    public function clearComments(){
      return $this->_clear(2);
    }
    
    /**
     * Get <Comments> value
     *
     * @param int $idx
     * @return \iface\SingleComment
     */
    public function getComments($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <Comments> value
     *
     * @param \iface\SingleComment $value
     * @return \iface\BatchGetCommentsResponse
     */
    public function setComments(\iface\SingleComment $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <Comments>
     *
     * @return \iface\SingleComment[]
     */
    public function getCommentsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <Comments>
     *
     * @param \iface\SingleComment $value
     * @return \iface\BatchGetCommentsResponse
     */
    public function addComments(\iface\SingleComment $value){
     return $this->_add(2, $value);
    }
  }
}

namespace iface {

  class GetNotificationRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $ProductId = null;
    
    /**  @var string */
    public $DeviceId = null;
    
    /**  @var string */
    public $UserId = null;
    
    /**  @var int */
    public $LastId = null;
    
    /**  @var int */
    public $Length = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.GetNotificationRequest');

      // OPTIONAL STRING ProductId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ProductId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING DeviceId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "DeviceId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING UserId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "UserId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 LastId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "LastId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 Length = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "Length";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ProductId> has a value
     *
     * @return boolean
     */
    public function hasProductId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ProductId> value
     *
     * @return \iface\GetNotificationRequest
     */
    public function clearProductId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ProductId> value
     *
     * @return string
     */
    public function getProductId(){
      return $this->_get(1);
    }
    
    /**
     * Set <ProductId> value
     *
     * @param string $value
     * @return \iface\GetNotificationRequest
     */
    public function setProductId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <DeviceId> has a value
     *
     * @return boolean
     */
    public function hasDeviceId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <DeviceId> value
     *
     * @return \iface\GetNotificationRequest
     */
    public function clearDeviceId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <DeviceId> value
     *
     * @return string
     */
    public function getDeviceId(){
      return $this->_get(2);
    }
    
    /**
     * Set <DeviceId> value
     *
     * @param string $value
     * @return \iface\GetNotificationRequest
     */
    public function setDeviceId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <UserId> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <UserId> value
     *
     * @return \iface\GetNotificationRequest
     */
    public function clearUserId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <UserId> value
     *
     * @return string
     */
    public function getUserId(){
      return $this->_get(3);
    }
    
    /**
     * Set <UserId> value
     *
     * @param string $value
     * @return \iface\GetNotificationRequest
     */
    public function setUserId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <LastId> has a value
     *
     * @return boolean
     */
    public function hasLastId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <LastId> value
     *
     * @return \iface\GetNotificationRequest
     */
    public function clearLastId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <LastId> value
     *
     * @return int
     */
    public function getLastId(){
      return $this->_get(4);
    }
    
    /**
     * Set <LastId> value
     *
     * @param int $value
     * @return \iface\GetNotificationRequest
     */
    public function setLastId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <Length> has a value
     *
     * @return boolean
     */
    public function hasLength(){
      return $this->_has(5);
    }
    
    /**
     * Clear <Length> value
     *
     * @return \iface\GetNotificationRequest
     */
    public function clearLength(){
      return $this->_clear(5);
    }
    
    /**
     * Get <Length> value
     *
     * @return int
     */
    public function getLength(){
      return $this->_get(5);
    }
    
    /**
     * Set <Length> value
     *
     * @param int $value
     * @return \iface\GetNotificationRequest
     */
    public function setLength( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace iface {

  class LikeNotification extends \DrSlump\Protobuf\Message {

    /**  @var \iface\SingleComment */
    public $Comment = null;
    
    /**  @var int */
    public $LikeNumber = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.LikeNotification');

      // OPTIONAL MESSAGE Comment = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Comment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\iface\SingleComment';
      $descriptor->addField($f);

      // OPTIONAL UINT32 LikeNumber = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "LikeNumber";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Comment> has a value
     *
     * @return boolean
     */
    public function hasComment(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Comment> value
     *
     * @return \iface\LikeNotification
     */
    public function clearComment(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Comment> value
     *
     * @return \iface\SingleComment
     */
    public function getComment(){
      return $this->_get(1);
    }
    
    /**
     * Set <Comment> value
     *
     * @param \iface\SingleComment $value
     * @return \iface\LikeNotification
     */
    public function setComment(\iface\SingleComment $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <LikeNumber> has a value
     *
     * @return boolean
     */
    public function hasLikeNumber(){
      return $this->_has(2);
    }
    
    /**
     * Clear <LikeNumber> value
     *
     * @return \iface\LikeNotification
     */
    public function clearLikeNumber(){
      return $this->_clear(2);
    }
    
    /**
     * Get <LikeNumber> value
     *
     * @return int
     */
    public function getLikeNumber(){
      return $this->_get(2);
    }
    
    /**
     * Set <LikeNumber> value
     *
     * @param int $value
     * @return \iface\LikeNotification
     */
    public function setLikeNumber( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace iface {

  class ReplyCommentNotification extends \DrSlump\Protobuf\Message {

    /**  @var \iface\SingleComment */
    public $Comment = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.ReplyCommentNotification');

      // OPTIONAL MESSAGE Comment = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "Comment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\iface\SingleComment';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Comment> has a value
     *
     * @return boolean
     */
    public function hasComment(){
      return $this->_has(2);
    }
    
    /**
     * Clear <Comment> value
     *
     * @return \iface\ReplyCommentNotification
     */
    public function clearComment(){
      return $this->_clear(2);
    }
    
    /**
     * Get <Comment> value
     *
     * @return \iface\SingleComment
     */
    public function getComment(){
      return $this->_get(2);
    }
    
    /**
     * Set <Comment> value
     *
     * @param \iface\SingleComment $value
     * @return \iface\ReplyCommentNotification
     */
    public function setComment(\iface\SingleComment $value){
      return $this->_set(2, $value);
    }
  }
}

namespace iface\SingleNotification {

  class ReadStatus extends \DrSlump\Protobuf\Enum {
    const UNREAD = 0;
    const READED = 1;
  }
}
namespace iface {

  class SingleNotification extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $Type = null;
    
    /**  @var int */
    public $NotificationId = null;
    
    /**  @var int - \iface\SingleNotification\ReadStatus */
    public $Status = null;
    
    /**  @var \iface\LikeNotification */
    public $LikeMsg = null;
    
    /**  @var \iface\ReplyCommentNotification */
    public $ReplyMsg = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.SingleNotification');

      // OPTIONAL UINT32 Type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Type";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 NotificationId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "NotificationId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM Status = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "Status";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\iface\SingleNotification\ReadStatus';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE LikeMsg = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "LikeMsg";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\iface\LikeNotification';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE ReplyMsg = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "ReplyMsg";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\iface\ReplyCommentNotification';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Type> value
     *
     * @return \iface\SingleNotification
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <Type> value
     *
     * @param int $value
     * @return \iface\SingleNotification
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <NotificationId> has a value
     *
     * @return boolean
     */
    public function hasNotificationId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <NotificationId> value
     *
     * @return \iface\SingleNotification
     */
    public function clearNotificationId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <NotificationId> value
     *
     * @return int
     */
    public function getNotificationId(){
      return $this->_get(2);
    }
    
    /**
     * Set <NotificationId> value
     *
     * @param int $value
     * @return \iface\SingleNotification
     */
    public function setNotificationId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <Status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(3);
    }
    
    /**
     * Clear <Status> value
     *
     * @return \iface\SingleNotification
     */
    public function clearStatus(){
      return $this->_clear(3);
    }
    
    /**
     * Get <Status> value
     *
     * @return int - \iface\SingleNotification\ReadStatus
     */
    public function getStatus(){
      return $this->_get(3);
    }
    
    /**
     * Set <Status> value
     *
     * @param int - \iface\SingleNotification\ReadStatus $value
     * @return \iface\SingleNotification
     */
    public function setStatus( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <LikeMsg> has a value
     *
     * @return boolean
     */
    public function hasLikeMsg(){
      return $this->_has(4);
    }
    
    /**
     * Clear <LikeMsg> value
     *
     * @return \iface\SingleNotification
     */
    public function clearLikeMsg(){
      return $this->_clear(4);
    }
    
    /**
     * Get <LikeMsg> value
     *
     * @return \iface\LikeNotification
     */
    public function getLikeMsg(){
      return $this->_get(4);
    }
    
    /**
     * Set <LikeMsg> value
     *
     * @param \iface\LikeNotification $value
     * @return \iface\SingleNotification
     */
    public function setLikeMsg(\iface\LikeNotification $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <ReplyMsg> has a value
     *
     * @return boolean
     */
    public function hasReplyMsg(){
      return $this->_has(5);
    }
    
    /**
     * Clear <ReplyMsg> value
     *
     * @return \iface\SingleNotification
     */
    public function clearReplyMsg(){
      return $this->_clear(5);
    }
    
    /**
     * Get <ReplyMsg> value
     *
     * @return \iface\ReplyCommentNotification
     */
    public function getReplyMsg(){
      return $this->_get(5);
    }
    
    /**
     * Set <ReplyMsg> value
     *
     * @param \iface\ReplyCommentNotification $value
     * @return \iface\SingleNotification
     */
    public function setReplyMsg(\iface\ReplyCommentNotification $value){
      return $this->_set(5, $value);
    }
  }
}

namespace iface {

  class GetNotificationResponse extends \DrSlump\Protobuf\Message {

    /**  @var \iface\SingleNotification[]  */
    public $Notifications = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.GetNotificationResponse');

      // REPEATED MESSAGE Notifications = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "Notifications";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\iface\SingleNotification';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Notifications> has a value
     *
     * @return boolean
     */
    public function hasNotifications(){
      return $this->_has(2);
    }
    
    /**
     * Clear <Notifications> value
     *
     * @return \iface\GetNotificationResponse
     */
    public function clearNotifications(){
      return $this->_clear(2);
    }
    
    /**
     * Get <Notifications> value
     *
     * @param int $idx
     * @return \iface\SingleNotification
     */
    public function getNotifications($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <Notifications> value
     *
     * @param \iface\SingleNotification $value
     * @return \iface\GetNotificationResponse
     */
    public function setNotifications(\iface\SingleNotification $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <Notifications>
     *
     * @return \iface\SingleNotification[]
     */
    public function getNotificationsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <Notifications>
     *
     * @param \iface\SingleNotification $value
     * @return \iface\GetNotificationResponse
     */
    public function addNotifications(\iface\SingleNotification $value){
     return $this->_add(2, $value);
    }
  }
}

namespace iface {

  class CheckNotificationRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $ProductId = null;
    
    /**  @var string */
    public $UserId = null;
    
    /**  @var string */
    public $DeviceId = null;
    
    /**  @var int */
    public $LatestId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.CheckNotificationRequest');

      // OPTIONAL STRING ProductId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ProductId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING UserId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "UserId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING DeviceId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "DeviceId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 LatestId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "LatestId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ProductId> has a value
     *
     * @return boolean
     */
    public function hasProductId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ProductId> value
     *
     * @return \iface\CheckNotificationRequest
     */
    public function clearProductId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ProductId> value
     *
     * @return string
     */
    public function getProductId(){
      return $this->_get(1);
    }
    
    /**
     * Set <ProductId> value
     *
     * @param string $value
     * @return \iface\CheckNotificationRequest
     */
    public function setProductId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <UserId> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <UserId> value
     *
     * @return \iface\CheckNotificationRequest
     */
    public function clearUserId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <UserId> value
     *
     * @return string
     */
    public function getUserId(){
      return $this->_get(2);
    }
    
    /**
     * Set <UserId> value
     *
     * @param string $value
     * @return \iface\CheckNotificationRequest
     */
    public function setUserId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <DeviceId> has a value
     *
     * @return boolean
     */
    public function hasDeviceId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <DeviceId> value
     *
     * @return \iface\CheckNotificationRequest
     */
    public function clearDeviceId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <DeviceId> value
     *
     * @return string
     */
    public function getDeviceId(){
      return $this->_get(3);
    }
    
    /**
     * Set <DeviceId> value
     *
     * @param string $value
     * @return \iface\CheckNotificationRequest
     */
    public function setDeviceId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <LatestId> has a value
     *
     * @return boolean
     */
    public function hasLatestId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <LatestId> value
     *
     * @return \iface\CheckNotificationRequest
     */
    public function clearLatestId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <LatestId> value
     *
     * @return int
     */
    public function getLatestId(){
      return $this->_get(4);
    }
    
    /**
     * Set <LatestId> value
     *
     * @param int $value
     * @return \iface\CheckNotificationRequest
     */
    public function setLatestId( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace iface {

  class CheckNotificationResponse extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $HasNew = null;
    
    /**  @var int */
    public $NotificationType = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.CheckNotificationResponse');

      // OPTIONAL UINT32 HasNew = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "HasNew";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 NotificationType = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "NotificationType";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <HasNew> has a value
     *
     * @return boolean
     */
    public function hasHasNew(){
      return $this->_has(1);
    }
    
    /**
     * Clear <HasNew> value
     *
     * @return \iface\CheckNotificationResponse
     */
    public function clearHasNew(){
      return $this->_clear(1);
    }
    
    /**
     * Get <HasNew> value
     *
     * @return int
     */
    public function getHasNew(){
      return $this->_get(1);
    }
    
    /**
     * Set <HasNew> value
     *
     * @param int $value
     * @return \iface\CheckNotificationResponse
     */
    public function setHasNew( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <NotificationType> has a value
     *
     * @return boolean
     */
    public function hasNotificationType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <NotificationType> value
     *
     * @return \iface\CheckNotificationResponse
     */
    public function clearNotificationType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <NotificationType> value
     *
     * @return int
     */
    public function getNotificationType(){
      return $this->_get(2);
    }
    
    /**
     * Set <NotificationType> value
     *
     * @param int $value
     * @return \iface\CheckNotificationResponse
     */
    public function setNotificationType( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace iface {

  class ReadNotificationRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $ProductId = null;
    
    /**  @var string */
    public $UserId = null;
    
    /**  @var string */
    public $DeviceId = null;
    
    /**  @var int */
    public $NotificationId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.ReadNotificationRequest');

      // OPTIONAL STRING ProductId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ProductId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING UserId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "UserId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING DeviceId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "DeviceId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 NotificationId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "NotificationId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ProductId> has a value
     *
     * @return boolean
     */
    public function hasProductId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ProductId> value
     *
     * @return \iface\ReadNotificationRequest
     */
    public function clearProductId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ProductId> value
     *
     * @return string
     */
    public function getProductId(){
      return $this->_get(1);
    }
    
    /**
     * Set <ProductId> value
     *
     * @param string $value
     * @return \iface\ReadNotificationRequest
     */
    public function setProductId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <UserId> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <UserId> value
     *
     * @return \iface\ReadNotificationRequest
     */
    public function clearUserId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <UserId> value
     *
     * @return string
     */
    public function getUserId(){
      return $this->_get(2);
    }
    
    /**
     * Set <UserId> value
     *
     * @param string $value
     * @return \iface\ReadNotificationRequest
     */
    public function setUserId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <DeviceId> has a value
     *
     * @return boolean
     */
    public function hasDeviceId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <DeviceId> value
     *
     * @return \iface\ReadNotificationRequest
     */
    public function clearDeviceId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <DeviceId> value
     *
     * @return string
     */
    public function getDeviceId(){
      return $this->_get(3);
    }
    
    /**
     * Set <DeviceId> value
     *
     * @param string $value
     * @return \iface\ReadNotificationRequest
     */
    public function setDeviceId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <NotificationId> has a value
     *
     * @return boolean
     */
    public function hasNotificationId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <NotificationId> value
     *
     * @return \iface\ReadNotificationRequest
     */
    public function clearNotificationId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <NotificationId> value
     *
     * @return int
     */
    public function getNotificationId(){
      return $this->_get(4);
    }
    
    /**
     * Set <NotificationId> value
     *
     * @param int $value
     * @return \iface\ReadNotificationRequest
     */
    public function setNotificationId( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace iface {

  class ReadNotificationResponse extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $Status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.ReadNotificationResponse');

      // OPTIONAL UINT32 Status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Status";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Status> value
     *
     * @return \iface\ReadNotificationResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Status> value
     *
     * @return int
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <Status> value
     *
     * @param int $value
     * @return \iface\ReadNotificationResponse
     */
    public function setStatus( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace iface {

  class GetRelatedCommentOfNotificationRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $ProductId = null;
    
    /**  @var string */
    public $UserId = null;
    
    /**  @var string */
    public $DeviceId = null;
    
    /**  @var int */
    public $LastId = null;
    
    /**  @var int */
    public $Length = null;
    
    /**  @var int */
    public $NotificationId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.GetRelatedCommentOfNotificationRequest');

      // OPTIONAL STRING ProductId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ProductId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING UserId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "UserId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING DeviceId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "DeviceId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 LastId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "LastId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 Length = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "Length";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 NotificationId = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "NotificationId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ProductId> has a value
     *
     * @return boolean
     */
    public function hasProductId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ProductId> value
     *
     * @return \iface\GetRelatedCommentOfNotificationRequest
     */
    public function clearProductId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ProductId> value
     *
     * @return string
     */
    public function getProductId(){
      return $this->_get(1);
    }
    
    /**
     * Set <ProductId> value
     *
     * @param string $value
     * @return \iface\GetRelatedCommentOfNotificationRequest
     */
    public function setProductId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <UserId> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <UserId> value
     *
     * @return \iface\GetRelatedCommentOfNotificationRequest
     */
    public function clearUserId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <UserId> value
     *
     * @return string
     */
    public function getUserId(){
      return $this->_get(2);
    }
    
    /**
     * Set <UserId> value
     *
     * @param string $value
     * @return \iface\GetRelatedCommentOfNotificationRequest
     */
    public function setUserId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <DeviceId> has a value
     *
     * @return boolean
     */
    public function hasDeviceId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <DeviceId> value
     *
     * @return \iface\GetRelatedCommentOfNotificationRequest
     */
    public function clearDeviceId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <DeviceId> value
     *
     * @return string
     */
    public function getDeviceId(){
      return $this->_get(3);
    }
    
    /**
     * Set <DeviceId> value
     *
     * @param string $value
     * @return \iface\GetRelatedCommentOfNotificationRequest
     */
    public function setDeviceId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <LastId> has a value
     *
     * @return boolean
     */
    public function hasLastId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <LastId> value
     *
     * @return \iface\GetRelatedCommentOfNotificationRequest
     */
    public function clearLastId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <LastId> value
     *
     * @return int
     */
    public function getLastId(){
      return $this->_get(4);
    }
    
    /**
     * Set <LastId> value
     *
     * @param int $value
     * @return \iface\GetRelatedCommentOfNotificationRequest
     */
    public function setLastId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <Length> has a value
     *
     * @return boolean
     */
    public function hasLength(){
      return $this->_has(5);
    }
    
    /**
     * Clear <Length> value
     *
     * @return \iface\GetRelatedCommentOfNotificationRequest
     */
    public function clearLength(){
      return $this->_clear(5);
    }
    
    /**
     * Get <Length> value
     *
     * @return int
     */
    public function getLength(){
      return $this->_get(5);
    }
    
    /**
     * Set <Length> value
     *
     * @param int $value
     * @return \iface\GetRelatedCommentOfNotificationRequest
     */
    public function setLength( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <NotificationId> has a value
     *
     * @return boolean
     */
    public function hasNotificationId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <NotificationId> value
     *
     * @return \iface\GetRelatedCommentOfNotificationRequest
     */
    public function clearNotificationId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <NotificationId> value
     *
     * @return int
     */
    public function getNotificationId(){
      return $this->_get(6);
    }
    
    /**
     * Set <NotificationId> value
     *
     * @param int $value
     * @return \iface\GetRelatedCommentOfNotificationRequest
     */
    public function setNotificationId( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace iface {

  class GetRelatedCommentOfNotificationResponse extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $DocId = null;
    
    /**  @var \iface\SingleComment[]  */
    public $Comments = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.GetRelatedCommentOfNotificationResponse');

      // OPTIONAL STRING DocId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "DocId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE Comments = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "Comments";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\iface\SingleComment';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <DocId> has a value
     *
     * @return boolean
     */
    public function hasDocId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <DocId> value
     *
     * @return \iface\GetRelatedCommentOfNotificationResponse
     */
    public function clearDocId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <DocId> value
     *
     * @return string
     */
    public function getDocId(){
      return $this->_get(2);
    }
    
    /**
     * Set <DocId> value
     *
     * @param string $value
     * @return \iface\GetRelatedCommentOfNotificationResponse
     */
    public function setDocId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <Comments> has a value
     *
     * @return boolean
     */
    public function hasComments(){
      return $this->_has(3);
    }
    
    /**
     * Clear <Comments> value
     *
     * @return \iface\GetRelatedCommentOfNotificationResponse
     */
    public function clearComments(){
      return $this->_clear(3);
    }
    
    /**
     * Get <Comments> value
     *
     * @param int $idx
     * @return \iface\SingleComment
     */
    public function getComments($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <Comments> value
     *
     * @param \iface\SingleComment $value
     * @return \iface\GetRelatedCommentOfNotificationResponse
     */
    public function setComments(\iface\SingleComment $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <Comments>
     *
     * @return \iface\SingleComment[]
     */
    public function getCommentsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <Comments>
     *
     * @param \iface\SingleComment $value
     * @return \iface\GetRelatedCommentOfNotificationResponse
     */
    public function addComments(\iface\SingleComment $value){
     return $this->_add(3, $value);
    }
  }
}

namespace iface {

  class OnReplyCallbackRequest extends \DrSlump\Protobuf\Message {

    /**  @var \iface\SingleComment */
    public $Comment = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.OnReplyCallbackRequest');

      // OPTIONAL MESSAGE Comment = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Comment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\iface\SingleComment';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Comment> has a value
     *
     * @return boolean
     */
    public function hasComment(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Comment> value
     *
     * @return \iface\OnReplyCallbackRequest
     */
    public function clearComment(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Comment> value
     *
     * @return \iface\SingleComment
     */
    public function getComment(){
      return $this->_get(1);
    }
    
    /**
     * Set <Comment> value
     *
     * @param \iface\SingleComment $value
     * @return \iface\OnReplyCallbackRequest
     */
    public function setComment(\iface\SingleComment $value){
      return $this->_set(1, $value);
    }
  }
}

namespace iface {

  class OnLikedCallbackRequest extends \DrSlump\Protobuf\Message {

    /**  @var \iface\SingleComment */
    public $Comment = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.OnLikedCallbackRequest');

      // OPTIONAL MESSAGE Comment = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Comment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\iface\SingleComment';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Comment> has a value
     *
     * @return boolean
     */
    public function hasComment(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Comment> value
     *
     * @return \iface\OnLikedCallbackRequest
     */
    public function clearComment(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Comment> value
     *
     * @return \iface\SingleComment
     */
    public function getComment(){
      return $this->_get(1);
    }
    
    /**
     * Set <Comment> value
     *
     * @param \iface\SingleComment $value
     * @return \iface\OnLikedCallbackRequest
     */
    public function setComment(\iface\SingleComment $value){
      return $this->_set(1, $value);
    }
  }
}

namespace iface {

  class EmptyMessage extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'iface.EmptyMessage');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace iface {

  class CommentServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param iface\NewCommentRequest $input
     */
    public function AddComment(\iface\NewCommentRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/iface.CommentService/AddComment', $argument, '\iface\NewCommentResponse::deserialize', $metadata, $options);
    }
    /**
     * @param iface\DelCommentRequest $input
     */
    public function DelComment(\iface\DelCommentRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/iface.CommentService/DelComment', $argument, '\iface\EmptyMessage::deserialize', $metadata, $options);
    }
    /**
     * @param iface\BatchGetCommentsRequest $input
     */
    public function GetCommentsById(\iface\BatchGetCommentsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/iface.CommentService/GetCommentsById', $argument, '\iface\BatchGetCommentsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param iface\GetCommentsOfDocRequest $input
     */
    public function GetCommentsByDoc(\iface\GetCommentsOfDocRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/iface.CommentService/GetCommentsByDoc', $argument, '\iface\BatchGetCommentsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param iface\LikeCommentRequest $input
     */
    public function LikeComment(\iface\LikeCommentRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/iface.CommentService/LikeComment', $argument, '\iface\LikeCommentResponse::deserialize', $metadata, $options);
    }
    /**
     * @param iface\GetCommentsCountRequest $input
     */
    public function GetCommentsCount(\iface\GetCommentsCountRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/iface.CommentService/GetCommentsCount', $argument, '\iface\GetCommentsCountResponse::deserialize', $metadata, $options);
    }
    /**
     * @param iface\GetNotificationRequest $input
     */
    public function GetNotifications(\iface\GetNotificationRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/iface.CommentService/GetNotifications', $argument, '\iface\GetNotificationResponse::deserialize', $metadata, $options);
    }
    /**
     * @param iface\GetRelatedCommentOfNotificationRequest $input
     */
    public function GetRelatedCommentOfNotification(\iface\GetRelatedCommentOfNotificationRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/iface.CommentService/GetRelatedCommentOfNotification', $argument, '\iface\GetRelatedCommentOfNotificationResponse::deserialize', $metadata, $options);
    }
    /**
     * @param iface\CheckNotificationRequest $input
     */
    public function CheckNotification(\iface\CheckNotificationRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/iface.CommentService/CheckNotification', $argument, '\iface\CheckNotificationResponse::deserialize', $metadata, $options);
    }
    /**
     * @param iface\ReadNotificationRequest $input
     */
    public function ReadNotification(\iface\ReadNotificationRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/iface.CommentService/ReadNotification', $argument, '\iface\ReadNotificationResponse::deserialize', $metadata, $options);
    }
  }
}
namespace iface {

  class CallbackServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param iface\OnReplyCallbackRequest $input
     */
    public function OnReply(\iface\OnReplyCallbackRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/iface.CallbackService/OnReply', $argument, '\iface\EmptyMessage::deserialize', $metadata, $options);
    }
    /**
     * @param iface\OnLikedCallbackRequest $input
     */
    public function OnLiked(\iface\OnLikedCallbackRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/iface.CallbackService/OnLiked', $argument, '\iface\EmptyMessage::deserialize', $metadata, $options);
    }
  }
}
